--
-- This script was generated by ci/bundle.lua, and is not intended to be modified.
--
local softnewccl = newcclosure or function(v) return v; end;
local softnewcl = softnewccl;
local softnewcclosure = softnewccl;
local softnewclosure = softnewccl;
local identifyexecutor = identifyexecutor or getexecutorname or softnewccl(function() return 'Unknown', 'v0.0.0.0' end);
local getexecutorname = identifyexecutor;
local iscclosure = iscclosure or islclosure and softnewccl(function(v) return not islclosure(v) end);
local islclosure = islclosure or iscclosure and softnewccl(function(v) return not iscclosure(v) end);
local getgenv = getgenv;
local newlclosure = newlclosure or function(v) return function(...) return v(...) end; end;
-- if getgenv then
--   getgenv().identifyexecutor = identifyexecutor;
--   getgenv().getexecutorname = getexecutorname;
--   getgenv().iscclosure = iscclosure;
--   getgenv().islclosure = islclosure;
--   getgenv().softnewccl = softnewccl;
--   getgenv().softnewcl = softnewcl;
--   getgenv().softnewcclosure = softnewcclosure;
--   getgenv().softnewclosure = softnewclosure;
--   getgenv().newlclosure = newlclosure;
-- end

------------------------------------------------
--                                            --
-- Everything below here is yoinked from orca --
--                                            --
------------------------------------------------
--
--[[
-- Orca, a free and open-source Roblox script hub.
-- This script was generated by ci/bundle.lua, and is not intended to be modified.
-- To view the source code, see the 'src' folder on GitHub!
--
-- Author: 0866
-- License: MIT
-- Version: "dev"
-- GitHub: https://github.com/richie0866/orca
--]] -- Runtime module
---@class Module
---@field fn function
---@field isLoaded boolean
---@field value any
---@type table<string, Instance>
local instanceFromId = {}

---@type table<Instance, string>
local idFromInstance = {}

---@type table<Instance, Module>
local modules = {}

---Stores currently loading modules.
---@type table<LocalScript | ModuleScript, ModuleScript>
local currentlyLoading = {}

-- Module resolution

---@param module LocalScript | ModuleScript
---@param caller? LocalScript | ModuleScript
---@return function | nil cleanup
local function validateRequire(module, caller)
  currentlyLoading[caller] = module

  local currentModule = module
  local depth = 0

  -- If the module is loaded, requiring it will not cause a circular dependency.
  if not modules[module] then
    while currentModule do
      depth = depth + 1
      currentModule = currentlyLoading[currentModule]

      if currentModule == module then
        local str = currentModule.Name -- Get the string traceback

        for _ = 1, depth do
          currentModule = currentlyLoading[currentModule]
          str = str .. '  â‡’ ' .. currentModule.Name
        end

        error('Failed to load \'' .. module.Name .. '\'; Detected a circular dependency chain: ' .. str, 2)
      end
    end
  end

  return function()
    if currentlyLoading[caller] == module then -- Thread-safe cleanup!
      currentlyLoading[caller] = nil
    end
  end
end

---@param obj LocalScript | ModuleScript
---@param this? LocalScript | ModuleScript
---@return any
local function loadModule(obj, this)
  local cleanup = this and validateRequire(obj, this)
  local module = modules[obj]

  if module.isLoaded then
    if cleanup then cleanup() end
    return module.value
  else
    local data = module.fn()
    module.value = data
    module.isLoaded = true
    if cleanup then cleanup() end
    return data
  end
end

---@param target ModuleScript
---@param this? LocalScript | ModuleScript
---@return any
local function requireModuleInternal(target, this)
  if modules[target] and target:IsA('ModuleScript') then
    return loadModule(target, this)
  else
    return require(target)
  end
end

-- Instance creation

---@param id string
---@return table<string, any> environment
local function newEnv(id)
  return setmetatable({
    VERSION = "dev";
    script = instanceFromId[id];
    require = function(module) return requireModuleInternal(module, instanceFromId[id]) end;
  }, {__index = getfenv(0); __metatable = 'This metatable is locked'})
end

---@param name string
---@param className string
---@param path string
---@param parent string | nil
---@param fn function
local function newModule(name, className, path, parent, fn)
  local instance = Instance.new(className)
  instance.Name = name
  instance.Parent = instanceFromId[parent]

  instanceFromId[path] = instance
  idFromInstance[instance] = path

  modules[instance] = {fn = fn; isLoaded = false; value = nil}
end

---@param name string
---@param className string
---@param path string
---@param parent string | nil
local function newInstance(name, className, path, parent)
  local instance = Instance.new(className)
  instance.Name = name
  instance.Parent = instanceFromId[parent]

  instanceFromId[path] = instance
  idFromInstance[instance] = path
end

-- Runtime

local function init()
  if not game:IsLoaded() then game.Loaded:Wait() end
  for object in pairs(modules) do
    if object:IsA('LocalScript') and not object.Disabled then task.spawn(loadModule, object) end
  end
end


newInstance("roblox-ts-model", "Folder", "roblox-ts-model", nil)

newModule("main", "LocalScript", "roblox-ts-model.main", "roblox-ts-model", function () return setfenv(function() -- Compiled with roblox-ts v1.3.3
local TS = require(script.Parent.include.RuntimeLib)
local Roact = TS.import(script, TS.getModule(script, "@rbxts", "roact").src)
-- The below would usually be handled by a UI Library written natively in ts
-- Fetch the most appopriate ui parent
local LocalPlayer = game:GetService("Players").LocalPlayer
local PlayerGui
TS.try(function()
	PlayerGui = if gethui then gethui() else game:GetService("CoreGui")
end, function(error) end)
if not PlayerGui then
	PlayerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
end
-- Create an example UI
local _attributes = {
	IgnoreGuiInset = true,
}
local _children = {}
local _length = #_children
local _attributes_1 = {
	Text = "It works!",
	Size = UDim2.new(1, 0, 1, 0),
}
for _k, _v in pairs({
	MouseButton1Click = function()
		return print("gay")
	end,
}) do
	_attributes_1[Roact.Event[_k]] = _v
end
_children.Label = Roact.createElement("TextButton", _attributes_1)
local tree = Roact.createElement("ScreenGui", _attributes, _children)
-- Mount it
Roact.mount(tree, PlayerGui, tostring(math.random()))
 end, newEnv("roblox-ts-model.main"))() end)

newInstance("include", "Folder", "roblox-ts-model.include", "roblox-ts-model")

newModule("Promise", "ModuleScript", "roblox-ts-model.include.Promise", "roblox-ts-model.include", function () return setfenv(function() --[[
	An implementation of Promises similar to Promise/A+.
]]

local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
local ERROR_NON_LIST = "Please pass a list of promises to %s"
local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
local MODE_KEY_METATABLE = { __mode = "k" }

local function isCallable(value)
	if type(value) == "function" then
		return true
	end

	if type(value) == "table" then
		local metatable = getmetatable(value)
		if metatable and type(rawget(metatable, "__call")) == "function" then
			return true
		end
	end

	return false
end

--[[
	Creates an enum dictionary with some metamethods to prevent common mistakes.
]]
local function makeEnum(enumName, members)
	local enum = {}

	for _, memberName in ipairs(members) do
		enum[memberName] = memberName
	end

	return setmetatable(enum, {
		__index = function(_, k)
			error(string.format("%s is not in %s!", k, enumName), 2)
		end,
		__newindex = function()
			error(string.format("Creating new members in %s is not allowed!", enumName), 2)
		end,
	})
end

--[=[
	An object to represent runtime errors that occur during execution.
	Promises that experience an error like this will be rejected with
	an instance of this object.

	@class Error
]=]
local Error
do
	Error = {
		Kind = makeEnum("Promise.Error.Kind", {
			"ExecutionError",
			"AlreadyCancelled",
			"NotResolvedInTime",
			"TimedOut",
		}),
	}
	Error.__index = Error

	function Error.new(options, parent)
		options = options or {}
		return setmetatable({
			error = tostring(options.error) or "[This error has no error text.]",
			trace = options.trace,
			context = options.context,
			kind = options.kind,
			parent = parent,
			createdTick = os.clock(),
			createdTrace = debug.traceback(),
		}, Error)
	end

	function Error.is(anything)
		if type(anything) == "table" then
			local metatable = getmetatable(anything)

			if type(metatable) == "table" then
				return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
			end
		end

		return false
	end

	function Error.isKind(anything, kind)
		assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")

		return Error.is(anything) and anything.kind == kind
	end

	function Error:extend(options)
		options = options or {}

		options.kind = options.kind or self.kind

		return Error.new(options, self)
	end

	function Error:getErrorChain()
		local runtimeErrors = { self }

		while runtimeErrors[#runtimeErrors].parent do
			table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
		end

		return runtimeErrors
	end

	function Error:__tostring()
		local errorStrings = {
			string.format("-- Promise.Error(%s) --", self.kind or "?"),
		}

		for _, runtimeError in ipairs(self:getErrorChain()) do
			table.insert(
				errorStrings,
				table.concat({
					runtimeError.trace or runtimeError.error,
					runtimeError.context,
				}, "\n")
			)
		end

		return table.concat(errorStrings, "\n")
	end
end

--[[
	Packs a number of arguments into a table and returns its length.

	Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
	return select("#", ...), { ... }
end

--[[
	Returns first value (success), and packs all following values.
]]
local function packResult(success, ...)
	return success, select("#", ...), { ... }
end

local function makeErrorHandler(traceback)
	assert(traceback ~= nil, "traceback is nil")

	return function(err)
		-- If the error object is already a table, forward it directly.
		-- Should we extend the error here and add our own trace?

		if type(err) == "table" then
			return err
		end

		return Error.new({
			error = err,
			kind = Error.Kind.ExecutionError,
			trace = debug.traceback(tostring(err), 2),
			context = "Promise created at:\n\n" .. traceback,
		})
	end
end

--[[
	Calls a Promise executor with error handling.
]]
local function runExecutor(traceback, callback, ...)
	return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
end

--[[
	Creates a function that invokes a callback with correct error handling and
	resolution mechanisms.
]]
local function createAdvancer(traceback, callback, resolve, reject)
	return function(...)
		local ok, resultLength, result = runExecutor(traceback, callback, ...)

		if ok then
			resolve(unpack(result, 1, resultLength))
		else
			reject(result[1])
		end
	end
end

local function isEmpty(t)
	return next(t) == nil
end

--[=[
	An enum value used to represent the Promise's status.
	@interface Status
	@tag enum
	@within Promise
	.Started "Started" -- The Promise is executing, and not settled yet.
	.Resolved "Resolved" -- The Promise finished successfully.
	.Rejected "Rejected" -- The Promise was rejected.
	.Cancelled "Cancelled" -- The Promise was cancelled before it finished.
]=]
--[=[
	@prop Status Status
	@within Promise
	@readonly
	@tag enums
	A table containing all members of the `Status` enum, e.g., `Promise.Status.Resolved`.
]=]
--[=[
	A Promise is an object that represents a value that will exist in the future, but doesn't right now.
	Promises allow you to then attach callbacks that can run once the value becomes available (known as *resolving*),
	or if an error has occurred (known as *rejecting*).

	@class Promise
	@__index prototype
]=]
local Promise = {
	Error = Error,
	Status = makeEnum("Promise.Status", { "Started", "Resolved", "Rejected", "Cancelled" }),
	_getTime = os.clock,
	_timeEvent = game:GetService("RunService").Heartbeat,
	_unhandledRejectionCallbacks = {},
}
Promise.prototype = {}
Promise.__index = Promise.prototype

function Promise._new(traceback, callback, parent)
	if parent ~= nil and not Promise.is(parent) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end

	local self = {
		-- Used to locate where a promise was created
		_source = traceback,

		_status = Promise.Status.Started,

		-- A table containing a list of all results, whether success or failure.
		-- Only valid if _status is set to something besides Started
		_values = nil,

		-- Lua doesn't like sparse arrays very much, so we explicitly store the
		-- length of _values to handle middle nils.
		_valuesLength = -1,

		-- Tracks if this Promise has no error observers..
		_unhandledRejection = true,

		-- Queues representing functions we should invoke when we update!
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},

		-- The function to run when/if this promise is cancelled.
		_cancellationHook = nil,

		-- The "parent" of this promise in a promise chain. Required for
		-- cancellation propagation upstream.
		_parent = parent,

		-- Consumers are Promises that have chained onto this one.
		-- We track them for cancellation propagation downstream.
		_consumers = setmetatable({}, MODE_KEY_METATABLE),
	}

	if parent and parent._status == Promise.Status.Started then
		parent._consumers[self] = true
	end

	setmetatable(self, Promise)

	local function resolve(...)
		self:_resolve(...)
	end

	local function reject(...)
		self:_reject(...)
	end

	local function onCancel(cancellationHook)
		if cancellationHook then
			if self._status == Promise.Status.Cancelled then
				cancellationHook()
			else
				self._cancellationHook = cancellationHook
			end
		end

		return self._status == Promise.Status.Cancelled
	end

	coroutine.wrap(function()
		local ok, _, result = runExecutor(self._source, callback, resolve, reject, onCancel)

		if not ok then
			reject(result[1])
		end
	end)()

	return self
end

--[=[
	Construct a new Promise that will be resolved or rejected with the given callbacks.

	If you `resolve` with a Promise, it will be chained onto.

	You can safely yield within the executor function and it will not block the creating thread.

	```lua
	local myFunction()
		return Promise.new(function(resolve, reject, onCancel)
			wait(1)
			resolve("Hello world!")
		end)
	end

	myFunction():andThen(print)
	```

	You do not need to use `pcall` within a Promise. Errors that occur during execution will be caught and turned into a rejection automatically. If `error()` is called with a table, that table will be the rejection value. Otherwise, string errors will be converted into `Promise.Error(Promise.Error.Kind.ExecutionError)` objects for tracking debug information.

	You may register an optional cancellation hook by using the `onCancel` argument:

	* This should be used to abort any ongoing operations leading up to the promise being settled.
	* Call the `onCancel` function with a function callback as its only argument to set a hook which will in turn be called when/if the promise is cancelled.
	* `onCancel` returns `true` if the Promise was already cancelled when you called `onCancel`.
	* Calling `onCancel` with no argument will not override a previously set cancellation hook, but it will still return `true` if the Promise is currently cancelled.
	* You can set the cancellation hook at any time before resolving.
	* When a promise is cancelled, calls to `resolve` or `reject` will be ignored, regardless of if you set a cancellation hook or not.

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.new(executor)
	return Promise._new(debug.traceback(nil, 2), executor)
end

function Promise:__tostring()
	return string.format("Promise(%s)", self._status)
end

--[=[
	The same as [Promise.new](/api/Promise#new), except execution begins after the next `Heartbeat` event.

	This is a spiritual replacement for `spawn`, but it does not suffer from the same [issues](https://eryn.io/gist/3db84579866c099cdd5bb2ff37947cec) as `spawn`.

	```lua
	local function waitForChild(instance, childName, timeout)
	  return Promise.defer(function(resolve, reject)
		local child = instance:WaitForChild(childName, timeout)

		;(child and resolve or reject)(child)
	  end)
	end
	```

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.defer(executor)
	local traceback = debug.traceback(nil, 2)
	local promise
	promise = Promise._new(traceback, function(resolve, reject, onCancel)
		local connection
		connection = Promise._timeEvent:Connect(function()
			connection:Disconnect()
			local ok, _, result = runExecutor(traceback, executor, resolve, reject, onCancel)

			if not ok then
				reject(result[1])
			end
		end)
	end)

	return promise
end

-- Backwards compatibility
Promise.async = Promise.defer

--[=[
	Creates an immediately resolved Promise with the given value.

	```lua
	-- Example using Promise.resolve to deliver cached values:
	function getSomething(name)
		if cache[name] then
			return Promise.resolve(cache[name])
		else
			return Promise.new(function(resolve, reject)
				local thing = getTheThing()
				cache[name] = thing

				resolve(thing)
			end)
		end
	end
	```

	@param ... any
	@return Promise<...any>
]=]
function Promise.resolve(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(resolve)
		resolve(unpack(values, 1, length))
	end)
end

--[=[
	Creates an immediately rejected Promise with the given value.

	:::caution
	Something needs to consume this rejection (i.e. `:catch()` it), otherwise it will emit an unhandled Promise rejection warning on the next frame. Thus, you should not create and store rejected Promises for later use. Only create them on-demand as needed.
	:::

	@param ... any
	@return Promise<...any>
]=]
function Promise.reject(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(_, reject)
		reject(unpack(values, 1, length))
	end)
end

--[[
	Runs a non-promise-returning function as a Promise with the
  given arguments.
]]
function Promise._try(traceback, callback, ...)
	local valuesLength, values = pack(...)

	return Promise._new(traceback, function(resolve)
		resolve(callback(unpack(values, 1, valuesLength)))
	end)
end

--[=[
	Begins a Promise chain, calling a function and returning a Promise resolving with its return value. If the function errors, the returned Promise will be rejected with the error. You can safely yield within the Promise.try callback.

	:::info
	`Promise.try` is similar to [Promise.promisify](#promisify), except the callback is invoked immediately instead of returning a new function.
	:::

	```lua
	Promise.try(function()
		return math.random(1, 2) == 1 and "ok" or error("Oh an error!")
	end)
		:andThen(function(text)
			print(text)
		end)
		:catch(function(err)
			warn("Something went wrong")
		end)
	```

	@param callback (...: T...) -> ...any
	@param ... T... -- Additional arguments passed to `callback`
	@return Promise
]=]
function Promise.try(callback, ...)
	return Promise._try(debug.traceback(nil, 2), callback, ...)
end

--[[
	Returns a new promise that:
		* is resolved when all input promises resolve
		* is rejected if ANY input promises reject
]]
function Promise._all(traceback, promises, amount)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 or amount == 0 then
		return Promise.resolve({})
	end

	return Promise._new(traceback, function(resolve, reject, onCancel)
		-- An array to contain our resolved values from the given promises.
		local resolvedValues = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local resolvedCount = 0
		local rejectedCount = 0
		local done = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			if done then
				return
			end

			resolvedCount = resolvedCount + 1

			if amount == nil then
				resolvedValues[i] = ...
			else
				resolvedValues[resolvedCount] = ...
			end

			if resolvedCount >= (amount or #promises) then
				done = true
				resolve(resolvedValues)
				cancel()
			end
		end

		onCancel(cancel)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(function(...)
				resolveOne(i, ...)
			end, function(...)
				rejectedCount = rejectedCount + 1

				if amount == nil or #promises - rejectedCount < amount then
					cancel()
					done = true

					reject(...)
				end
			end)
		end

		if done then
			cancel()
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that:
	* is resolved after all input promises resolve.
	* is rejected if *any* input promises reject.

	:::info
	Only the first return value from each promise will be present in the resulting array.
	:::

	After any input Promise rejects, all other input Promises that are still pending will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.all(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{T}>
]=]
function Promise.all(promises)
	return Promise._all(debug.traceback(nil, 2), promises)
end

--[=[
	Folds an array of values or promises into a single value. The array is traversed sequentially.

	The reducer function can return a promise or value directly. Each iteration receives the resolved value from the previous, and the first receives your defined initial value.

	The folding will stop at the first rejection encountered.
	```lua
	local basket = {"blueberry", "melon", "pear", "melon"}
	Promise.fold(basket, function(cost, fruit)
		if fruit == "blueberry" then
			return cost -- blueberries are free!
		else
			-- call a function that returns a promise with the fruit price
			return fetchPrice(fruit):andThen(function(fruitCost)
				return cost + fruitCost
			end)
		end
	end, 0)
	```

	@since v3.1.0
	@param list {T | Promise<T>}
	@param reducer (accumulator: U, value: T, index: number) -> U | Promise<U>
	@param initialValue U
]=]
function Promise.fold(list, reducer, initialValue)
	assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
	assert(isCallable(reducer), "Bad argument #2 to Promise.fold: must be a function")

	local accumulator = Promise.resolve(initialValue)
	return Promise.each(list, function(resolvedElement, i)
		accumulator = accumulator:andThen(function(previousValueResolved)
			return reducer(previousValueResolved, resolvedElement, i)
		end)
	end):andThen(function()
		return accumulator
	end)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as `count` Promises are resolved from the input array. The resolved array values are in the order that the Promises resolved in. When this Promise resolves, all other pending Promises are cancelled if they have no other consumers.

	`count` 0 results in an empty array. The resultant array will never have more than `count` elements.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.some(promises, 2) -- Only resolves with first 2 promises to resolve
	```

	@param promises {Promise<T>}
	@param count number
	@return Promise<{T}>
]=]
function Promise.some(promises, count)
	assert(type(count) == "number", "Bad argument #2 to Promise.some: must be a number")

	return Promise._all(debug.traceback(nil, 2), promises, count)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as *any* of the input Promises resolves. It will reject only if *all* input Promises reject. As soon as one Promises resolves, all other pending Promises are cancelled if they have no other consumers.

	Resolves directly with the value of the first resolved Promise. This is essentially [[Promise.some]] with `1` count, except the Promise resolves with the value directly instead of an array with one element.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.any(promises) -- Resolves with first value to resolve (only rejects if all 3 rejected)
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.any(promises)
	return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
		return values[1]
	end)
end

--[=[
	Accepts an array of Promises and returns a new Promise that resolves with an array of in-place Statuses when all input Promises have settled. This is equivalent to mapping `promise:finally` over the array of Promises.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.allSettled(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{Status}>
]=]
function Promise.allSettled(promises)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 then
		return Promise.resolve({})
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		-- An array to contain our resolved values from the given promises.
		local fates = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local finishedCount = 0

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			finishedCount = finishedCount + 1

			fates[i] = ...

			if finishedCount >= #promises then
				resolve(fates)
			end
		end

		onCancel(function()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:finally(function(...)
				resolveOne(i, ...)
			end)
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that is resolved or rejected as soon as any Promise in the array resolves or rejects.

	:::warning
	If the first Promise to settle from the array settles with a rejection, the resulting Promise from `race` will reject.

	If you instead want to tolerate rejections, and only care about at least one Promise resolving, you should use [Promise.any](#any) or [Promise.some](#some) instead.
	:::

	All other Promises that don't win the race will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.race(promises) -- Only returns 1st value to resolve or reject
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.race(promises)
	assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))

	for i, promise in pairs(promises) do
		assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local newPromises = {}
		local finished = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		local function finalize(callback)
			return function(...)
				cancel()
				finished = true
				return callback(...)
			end
		end

		if onCancel(finalize(reject)) then
			return
		end

		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
		end

		if finished then
			cancel()
		end
	end)
end

--[=[
	Iterates serially over the given an array of values, calling the predicate callback on each value before continuing.

	If the predicate returns a Promise, we wait for that Promise to resolve before moving on to the next item
	in the array.

	:::info
	`Promise.each` is similar to `Promise.all`, except the Promises are ran in order instead of all at once.

	But because Promises are eager, by the time they are created, they're already running. Thus, we need a way to defer creation of each Promise until a later time.

	The predicate function exists as a way for us to operate on our data instead of creating a new closure for each Promise. If you would prefer, you can pass in an array of functions, and in the predicate, call the function and return its return value.
	:::

	```lua
	Promise.each({
		"foo",
		"bar",
		"baz",
		"qux"
	}, function(value, index)
		return Promise.delay(1):andThen(function()
		print(("%d) Got %s!"):format(index, value))
		end)
	end)

	--[[
		(1 second passes)
		> 1) Got foo!
		(1 second passes)
		> 2) Got bar!
		(1 second passes)
		> 3) Got baz!
		(1 second passes)
		> 4) Got qux!
	]]
	```

	If the Promise a predicate returns rejects, the Promise from `Promise.each` is also rejected with the same value.

	If the array of values contains a Promise, when we get to that point in the list, we wait for the Promise to resolve before calling the predicate with the value.

	If a Promise in the array of values is already Rejected when `Promise.each` is called, `Promise.each` rejects with that value immediately (the predicate callback will never be called even once). If a Promise in the list is already Cancelled when `Promise.each` is called, `Promise.each` rejects with `Promise.Error(Promise.Error.Kind.AlreadyCancelled`). If a Promise in the array of values is Started at first, but later rejects, `Promise.each` will reject with that value and iteration will not continue once iteration encounters that value.

	Returns a Promise containing an array of the returned/resolved values from the predicate for each item in the array of values.

	If this Promise returned from `Promise.each` rejects or is cancelled for any reason, the following are true:
	- Iteration will not continue.
	- Any Promises within the array of values will now be cancelled if they have no other consumers.
	- The Promise returned from the currently active predicate will be cancelled if it hasn't resolved yet.

	@since 3.0.0
	@param list {T | Promise<T>}
	@param predicate (value: T, index: number) -> U | Promise<U>
	@return Promise<{U}>
]=]
function Promise.each(list, predicate)
	assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
	assert(isCallable(predicate), string.format(ERROR_NON_FUNCTION, "Promise.each"))

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local results = {}
		local promisesToCancel = {}

		local cancelled = false

		local function cancel()
			for _, promiseToCancel in ipairs(promisesToCancel) do
				promiseToCancel:cancel()
			end
		end

		onCancel(function()
			cancelled = true

			cancel()
		end)

		-- We need to preprocess the list of values and look for Promises.
		-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
		-- from us registered. If we don't do this, those Promises might get cancelled by something else
		-- before we get to them in the series because it's not possible to tell that we plan to use it
		-- unless we indicate it here.

		local preprocessedList = {}

		for index, value in ipairs(list) do
			if Promise.is(value) then
				if value:getStatus() == Promise.Status.Cancelled then
					cancel()
					return reject(Error.new({
						error = "Promise is cancelled",
						kind = Error.Kind.AlreadyCancelled,
						context = string.format(
							"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
							index,
							value._source
						),
					}))
				elseif value:getStatus() == Promise.Status.Rejected then
					cancel()
					return reject(select(2, value:await()))
				end

				-- Chain a new Promise from this one so we only cancel ours
				local ourPromise = value:andThen(function(...)
					return ...
				end)

				table.insert(promisesToCancel, ourPromise)
				preprocessedList[index] = ourPromise
			else
				preprocessedList[index] = value
			end
		end

		for index, value in ipairs(preprocessedList) do
			if Promise.is(value) then
				local success
				success, value = value:await()

				if not success then
					cancel()
					return reject(value)
				end
			end

			if cancelled then
				return
			end

			local predicatePromise = Promise.resolve(predicate(value, index))

			table.insert(promisesToCancel, predicatePromise)

			local success, result = predicatePromise:await()

			if not success then
				cancel()
				return reject(result)
			end

			results[index] = result
		end

		resolve(results)
	end)
end

--[=[
	Checks whether the given object is a Promise via duck typing. This only checks if the object is a table and has an `andThen` method.

	@param object any
	@return boolean -- `true` if the given `object` is a Promise.
]=]
function Promise.is(object)
	if type(object) ~= "table" then
		return false
	end

	local objectMetatable = getmetatable(object)

	if objectMetatable == Promise then
		-- The Promise came from this library.
		return true
	elseif objectMetatable == nil then
		-- No metatable, but we should still chain onto tables with andThen methods
		return isCallable(object.andThen)
	elseif
		type(objectMetatable) == "table"
		and type(rawget(objectMetatable, "__index")) == "table"
		and isCallable(rawget(rawget(objectMetatable, "__index"), "andThen"))
	then
		-- Maybe this came from a different or older Promise library.
		return true
	end

	return false
end

--[=[
	Wraps a function that yields into one that returns a Promise.

	Any errors that occur while executing the function will be turned into rejections.

	:::info
	`Promise.promisify` is similar to [Promise.try](#try), except the callback is returned as a callable function instead of being invoked immediately.
	:::

	```lua
	local sleep = Promise.promisify(wait)

	sleep(1):andThen(print)
	```

	```lua
	local isPlayerInGroup = Promise.promisify(function(player, groupId)
		return player:IsInGroup(groupId)
	end)
	```

	@param callback (...: any) -> ...any
	@return (...: any) -> Promise
]=]
function Promise.promisify(callback)
	return function(...)
		return Promise._try(debug.traceback(nil, 2), callback, ...)
	end
end

--[=[
	Returns a Promise that resolves after `seconds` seconds have passed. The Promise resolves with the actual amount of time that was waited.

	This function is **not** a wrapper around `wait`. `Promise.delay` uses a custom scheduler which provides more accurate timing. As an optimization, cancelling this Promise instantly removes the task from the scheduler.

	:::warning
	Passing `NaN`, infinity, or a number less than 1/60 is equivalent to passing 1/60.
	:::

	```lua
		Promise.delay(5):andThenCall(print, "This prints after 5 seconds")
	```

	@function delay
	@within Promise
	@param seconds number
	@return Promise<number>
]=]
do
	-- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert

	-- the initial node in the linked list
	local first
	local connection

	function Promise.delay(seconds)
		assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
		-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
		-- This mirrors the behavior of wait()
		if not (seconds >= 1 / 60) or seconds == math.huge then
			seconds = 1 / 60
		end

		return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
			local startTime = Promise._getTime()
			local endTime = startTime + seconds

			local node = {
				resolve = resolve,
				startTime = startTime,
				endTime = endTime,
			}

			if connection == nil then -- first is nil when connection is nil
				first = node
				connection = Promise._timeEvent:Connect(function()
					local threadStart = Promise._getTime()

					while first ~= nil and first.endTime < threadStart do
						local current = first
						first = current.next

						if first == nil then
							connection:Disconnect()
							connection = nil
						else
							first.previous = nil
						end

						current.resolve(Promise._getTime() - current.startTime)
					end
				end)
			else -- first is non-nil
				if first.endTime < endTime then -- if `node` should be placed after `first`
					-- we will insert `node` between `current` and `next`
					-- (i.e. after `current` if `next` is nil)
					local current = first
					local next = current.next

					while next ~= nil and next.endTime < endTime do
						current = next
						next = current.next
					end

					-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
					current.next = node
					node.previous = current

					if next ~= nil then
						node.next = next
						next.previous = node
					end
				else
					-- set `node` to `first`
					node.next = first
					first.previous = node
					first = node
				end
			end

			onCancel(function()
				-- remove node from queue
				local next = node.next

				if first == node then
					if next == nil then -- if `node` is the first and last
						connection:Disconnect()
						connection = nil
					else -- if `node` is `first` and not the last
						next.previous = nil
					end
					first = next
				else
					local previous = node.previous
					-- since `node` is not `first`, then we know `previous` is non-nil
					previous.next = next

					if next ~= nil then
						next.previous = previous
					end
				end
			end)
		end)
	end
end

--[=[
	Returns a new Promise that resolves if the chained Promise resolves within `seconds` seconds, or rejects if execution time exceeds `seconds`. The chained Promise will be cancelled if the timeout is reached.

	Rejects with `rejectionValue` if it is non-nil. If a `rejectionValue` is not given, it will reject with a `Promise.Error(Promise.Error.Kind.TimedOut)`. This can be checked with [[Error.isKind]].

	```lua
	getSomething():timeout(5):andThen(function(something)
		-- got something and it only took at max 5 seconds
	end):catch(function(e)
		-- Either getting something failed or the time was exceeded.

		if Promise.Error.isKind(e, Promise.Error.Kind.TimedOut) then
			warn("Operation timed out!")
		else
			warn("Operation encountered an error!")
		end
	end)
	```

	Sugar for:

	```lua
	Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(
				rejectionValue == nil
				and Promise.Error.new({ kind = Promise.Error.Kind.TimedOut })
				or rejectionValue
			)
		end),
		promise
	})
	```

	@param seconds number
	@param rejectionValue? any -- The value to reject with if the timeout is reached
	@return Promise
]=]
function Promise.prototype:timeout(seconds, rejectionValue)
	local traceback = debug.traceback(nil, 2)

	return Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(rejectionValue == nil and Error.new({
				kind = Error.Kind.TimedOut,
				error = "Timed out",
				context = string.format(
					"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
					seconds,
					traceback
				),
			}) or rejectionValue)
		end),
		self,
	})
end

--[=[
	Returns the current Promise status.

	@return Status
]=]
function Promise.prototype:getStatus()
	return self._status
end

--[[
	Creates a new promise that receives the result of this promise.

	The given callbacks are invoked depending on that result.
]]
function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
	self._unhandledRejection = false

	-- Create a new promise to follow this part of the chain
	return Promise._new(traceback, function(resolve, reject)
		-- Our default callbacks just pass values onto the next promise.
		-- This lets success and failure cascade correctly!

		local successCallback = resolve
		if successHandler then
			successCallback = createAdvancer(traceback, successHandler, resolve, reject)
		end

		local failureCallback = reject
		if failureHandler then
			failureCallback = createAdvancer(traceback, failureHandler, resolve, reject)
		end

		if self._status == Promise.Status.Started then
			-- If we haven't resolved yet, put ourselves into the queue
			table.insert(self._queuedResolve, successCallback)
			table.insert(self._queuedReject, failureCallback)
		elseif self._status == Promise.Status.Resolved then
			-- This promise has already resolved! Trigger success immediately.
			successCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Rejected then
			-- This promise died a terrible death! Trigger failure immediately.
			failureCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Cancelled then
			-- We don't want to call the success handler or the failure handler,
			-- we just reject this promise outright.
			reject(Error.new({
				error = "Promise is cancelled",
				kind = Error.Kind.AlreadyCancelled,
				context = "Promise created at\n\n" .. traceback,
			}))
		end
	end, self)
end

--[=[
	Chains onto an existing Promise and returns a new Promise.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::

	Return a Promise from the success or failure handler and it will be chained onto.

	@param successHandler (...: any) -> ...any
	@param failureHandler? (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:andThen(successHandler, failureHandler)
	assert(successHandler == nil or isCallable(successHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))

	return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
end

--[=[
	Shorthand for `Promise:andThen(nil, failureHandler)`.

	Returns a Promise that resolves if the `failureHandler` worked without encountering an additional error.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::


	@param failureHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:catch(failureHandler)
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:catch"))
	return self:_andThen(debug.traceback(nil, 2), nil, failureHandler)
end

--[=[
	Similar to [Promise.andThen](#andThen), except the return value is the same as the value passed to the handler. In other words, you can insert a `:tap` into a Promise chain without affecting the value that downstream Promises receive.

	```lua
		getTheValue()
		:tap(print)
		:andThen(function(theValue)
			print("Got", theValue, "even though print returns nil!")
		end)
	```

	If you return a Promise from the tap handler callback, its value will be discarded but `tap` will still wait until it resolves before passing the original value through.

	@param tapHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:tap(tapHandler)
	assert(isCallable(tapHandler), string.format(ERROR_NON_FUNCTION, "Promise:tap"))
	return self:_andThen(debug.traceback(nil, 2), function(...)
		local callbackReturn = tapHandler(...)

		if Promise.is(callbackReturn) then
			local length, values = pack(...)
			return callbackReturn:andThen(function()
				return unpack(values, 1, length)
			end)
		end

		return ...
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that calls the given callback with the predefined arguments. The resolved value is discarded.

	```lua
		promise:andThenCall(someFunction, "some", "arguments")
	```

	This is sugar for

	```lua
		promise:andThen(function()
		return someFunction("some", "arguments")
		end)
	```

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:andThenCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:andThenReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:andThen(function()
			return "some", "values"
		end)
	```

	:::caution
	Promises are eager, so if you pass a Promise to `andThenReturn`, it will begin executing before `andThenReturn` is reached in the chain. Likewise, if you pass a Promise created from [[Promise.reject]] into `andThenReturn`, it's possible that this will trigger the unhandled rejection warning. If you need to return a Promise, it's usually best practice to use [[Promise.andThen]].
	:::

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:andThenReturn(...)
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Cancels this promise, preventing the promise from resolving or rejecting. Does not do anything if the promise is already settled.

	Cancellations will propagate upwards and downwards through chained promises.

	Promises will only be cancelled if all of their consumers are also cancelled. This is to say that if you call `andThen` twice on the same promise, and you cancel only one of the child promises, it will not cancel the parent promise until the other child promise is also cancelled.

	```lua
		promise:cancel()
	```
]=]
function Promise.prototype:cancel()
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Cancelled

	if self._cancellationHook then
		self._cancellationHook()
	end

	if self._parent then
		self._parent:_consumerCancelled(self)
	end

	for child in pairs(self._consumers) do
		child:cancel()
	end

	self:_finalize()
end

--[[
	Used to decrease the number of consumers by 1, and if there are no more,
	cancel this promise.
]]
function Promise.prototype:_consumerCancelled(consumer)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._consumers[consumer] = nil

	if next(self._consumers) == nil then
		self:cancel()
	end
end

--[[
	Used to set a handler for when the promise resolves, rejects, or is
	cancelled. Returns a new promise chained from this promise.
]]
function Promise.prototype:_finally(traceback, finallyHandler, onlyOk)
	if not onlyOk then
		self._unhandledRejection = false
	end

	-- Return a promise chained off of this promise
	return Promise._new(traceback, function(resolve, reject)
		local finallyCallback = resolve
		if finallyHandler then
			finallyCallback = createAdvancer(traceback, finallyHandler, resolve, reject)
		end

		if onlyOk then
			local callback = finallyCallback
			finallyCallback = function(...)
				if self._status == Promise.Status.Rejected then
					return resolve(self)
				end

				return callback(...)
			end
		end

		if self._status == Promise.Status.Started then
			-- The promise is not settled, so queue this.
			table.insert(self._queuedFinally, finallyCallback)
		else
			-- The promise already settled or was cancelled, run the callback now.
			finallyCallback(self._status)
		end
	end, self)
end

--[=[
	Set a handler that will be called regardless of the promise's fate. The handler is called when the promise is resolved, rejected, *or* cancelled.

	Returns a new promise chained from this promise.

	:::caution
	If the Promise is cancelled, any Promises chained off of it with `andThen` won't run. Only Promises chained with `finally` or `done` will run in the case of cancellation.
	:::

	```lua
	local thing = createSomething()

	doSomethingWith(thing)
		:andThen(function()
			print("It worked!")
			-- do something..
		end)
		:catch(function()
			warn("Oh no it failed!")
		end)
		:finally(function()
			-- either way, destroy thing

			thing:Destroy()
		end)

	```

	@param finallyHandler (status: Status) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:finally(finallyHandler)
	assert(finallyHandler == nil or isCallable(finallyHandler), string.format(ERROR_NON_FUNCTION, "Promise:finally"))
	return self:_finally(debug.traceback(nil, 2), finallyHandler)
end

--[=[
	Same as `andThenCall`, except for `finally`.

	Attaches a `finally` handler to this Promise that calls the given callback with the predefined arguments.

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:finallyCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches a `finally` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:finallyReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:finally(function()
			return "some", "values"
		end)
	```

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:finallyReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Set a handler that will be called only if the Promise resolves or is cancelled. This method is similar to `finally`, except it doesn't catch rejections.

	:::caution
	`done` should be reserved specifically when you want to perform some operation after the Promise is finished (like `finally`), but you don't want to consume rejections (like in <a href="/roblox-lua-promise/lib/Examples.html#cancellable-animation-sequence">this example</a>). You should use `andThen` instead if you only care about the Resolved case.
	:::

	:::warning
	Like `finally`, if the Promise is cancelled, any Promises chained off of it with `andThen` won't run. Only Promises chained with `done` and `finally` will run in the case of cancellation.
	:::

	Returns a new promise chained from this promise.

	@param doneHandler (status: Status) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:done(doneHandler)
	assert(doneHandler == nil or isCallable(doneHandler), string.format(ERROR_NON_FUNCTION, "Promise:done"))
	return self:_finally(debug.traceback(nil, 2), doneHandler, true)
end

--[=[
	Same as `andThenCall`, except for `done`.

	Attaches a `done` handler to this Promise that calls the given callback with the predefined arguments.

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:doneCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:doneCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end, true)
end

--[=[
	Attaches a `done` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:doneReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:done(function()
			return "some", "values"
		end)
	```

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:doneReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end, true)
end

--[=[
	Yields the current thread until the given Promise completes. Returns the Promise's status, followed by the values that the promise resolved or rejected with.

	@yields
	@return Status -- The Status representing the fate of the Promise
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:awaitStatus()
	self._unhandledRejection = false

	if self._status == Promise.Status.Started then
		local bindable = Instance.new("BindableEvent")

		self:finally(function()
			bindable:Fire()
		end)

		bindable.Event:Wait()
		bindable:Destroy()
	end

	if self._status == Promise.Status.Resolved then
		return self._status, unpack(self._values, 1, self._valuesLength)
	elseif self._status == Promise.Status.Rejected then
		return self._status, unpack(self._values, 1, self._valuesLength)
	end

	return self._status
end

local function awaitHelper(status, ...)
	return status == Promise.Status.Resolved, ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns true if the Promise resolved, followed by the values that the promise resolved or rejected with.

	:::caution
	If the Promise gets cancelled, this function will return `false`, which is indistinguishable from a rejection. If you need to differentiate, you should use [[Promise.awaitStatus]] instead.
	:::

	```lua
		local worked, value = getTheValue():await()

	if worked then
		print("got", value)
	else
		warn("it failed")
	end
	```

	@yields
	@return boolean -- `true` if the Promise successfully resolved
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:await()
	return awaitHelper(self:awaitStatus())
end

local function expectHelper(status, ...)
	if status ~= Promise.Status.Resolved then
		error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
	end

	return ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns the values that the promise resolved with.

	```lua
	local worked = pcall(function()
		print("got", getTheValue():expect())
	end)

	if not worked then
		warn("it failed")
	end
	```

	This is essentially sugar for:

	```lua
	select(2, assert(promise:await()))
	```

	**Errors** if the Promise rejects or gets cancelled.

	@error any -- Errors with the rejection value if this Promise rejects or gets cancelled.
	@yields
	@return ...any -- The values the Promise resolved with.
]=]
function Promise.prototype:expect()
	return expectHelper(self:awaitStatus())
end

-- Backwards compatibility
Promise.prototype.awaitValue = Promise.prototype.expect

--[[
	Intended for use in tests.

	Similar to await(), but instead of yielding if the promise is unresolved,
	_unwrap will throw. This indicates an assumption that a promise has
	resolved.
]]
function Promise.prototype:_unwrap()
	if self._status == Promise.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end

	local success = self._status == Promise.Status.Resolved

	return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
	if self._status ~= Promise.Status.Started then
		if Promise.is((...)) then
			(...):_consumerCancelled(self)
		end
		return
	end

	-- If the resolved value was a Promise, we chain onto it!
	if Promise.is((...)) then
		-- Without this warning, arguments sometimes mysteriously disappear
		if select("#", ...) > 1 then
			local message = string.format(
				"When returning a Promise from andThen, extra arguments are " .. "discarded! See:\n\n%s",
				self._source
			)
			warn(message)
		end

		local chainedPromise = ...

		local promise = chainedPromise:andThen(function(...)
			self:_resolve(...)
		end, function(...)
			local maybeRuntimeError = chainedPromise._values[1]

			-- Backwards compatibility < v2
			if chainedPromise._error then
				maybeRuntimeError = Error.new({
					error = chainedPromise._error,
					kind = Error.Kind.ExecutionError,
					context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
				})
			end

			if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
				return self:_reject(maybeRuntimeError:extend({
					error = "This Promise was chained to a Promise that errored.",
					trace = "",
					context = string.format(
						"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
						self._source
					),
				}))
			end

			self:_reject(...)
		end)

		if promise._status == Promise.Status.Cancelled then
			self:cancel()
		elseif promise._status == Promise.Status.Started then
			-- Adopt ourselves into promise for cancellation propagation.
			self._parent = promise
			promise._consumers[self] = true
		end

		return
	end

	self._status = Promise.Status.Resolved
	self._valuesLength, self._values = pack(...)

	-- We assume that these callbacks will not throw errors.
	for _, callback in ipairs(self._queuedResolve) do
		coroutine.wrap(callback)(...)
	end

	self:_finalize()
end

function Promise.prototype:_reject(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Rejected
	self._valuesLength, self._values = pack(...)

	-- If there are any rejection handlers, call those!
	if not isEmpty(self._queuedReject) then
		-- We assume that these callbacks will not throw errors.
		for _, callback in ipairs(self._queuedReject) do
			coroutine.wrap(callback)(...)
		end
	else
		-- At this point, no one was able to observe the error.
		-- An error handler might still be attached if the error occurred
		-- synchronously. We'll wait one tick, and if there are still no
		-- observers, then we should put a message in the console.

		local err = tostring((...))

		coroutine.wrap(function()
			Promise._timeEvent:Wait()

			-- Someone observed the error, hooray!
			if not self._unhandledRejection then
				return
			end

			-- Build a reasonable message
			local message = string.format("Unhandled Promise rejection:\n\n%s\n\n%s", err, self._source)

			for _, callback in ipairs(Promise._unhandledRejectionCallbacks) do
				task.spawn(callback, self, unpack(self._values, 1, self._valuesLength))
			end

			if Promise.TEST then
				-- Don't spam output when we're running tests.
				return
			end

			warn(message)
		end)()
	end

	self:_finalize()
end

--[[
	Calls any :finally handlers. We need this to be a separate method and
	queue because we must call all of the finally callbacks upon a success,
	failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
	for _, callback in ipairs(self._queuedFinally) do
		-- Purposefully not passing values to callbacks here, as it could be the
		-- resolved values, or rejected errors. If the developer needs the values,
		-- they should use :andThen or :catch explicitly.
		coroutine.wrap(callback)(self._status)
	end

	self._queuedFinally = nil
	self._queuedReject = nil
	self._queuedResolve = nil

	-- Clear references to other Promises to allow gc
	if not Promise.TEST then
		self._parent = nil
		self._consumers = nil
	end
end

--[=[
	Chains a Promise from this one that is resolved if this Promise is already resolved, and rejected if it is not resolved at the time of calling `:now()`. This can be used to ensure your `andThen` handler occurs on the same frame as the root Promise execution.

	```lua
	doSomething()
		:now()
		:andThen(function(value)
			print("Got", value, "synchronously.")
		end)
	```

	If this Promise is still running, Rejected, or Cancelled, the Promise returned from `:now()` will reject with the `rejectionValue` if passed, otherwise with a `Promise.Error(Promise.Error.Kind.NotResolvedInTime)`. This can be checked with [[Error.isKind]].

	@param rejectionValue? any -- The value to reject with if the Promise isn't resolved
	@return Promise
]=]
function Promise.prototype:now(rejectionValue)
	local traceback = debug.traceback(nil, 2)
	if self._status == Promise.Status.Resolved then
		return self:_andThen(traceback, function(...)
			return ...
		end)
	else
		return Promise.reject(rejectionValue == nil and Error.new({
			kind = Error.Kind.NotResolvedInTime,
			error = "This Promise was not resolved in time for :now()",
			context = ":now() was called at:\n\n" .. traceback,
		}) or rejectionValue)
	end
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	```lua
	local function canFail(a, b, c)
		return Promise.new(function(resolve, reject)
			-- do something that can fail

			local failed, thing = doSomethingThatCanFail(a, b, c)

			if failed then
				reject("it failed")
			else
				resolve(thing)
			end
		end)
	end

	local MAX_RETRIES = 10
	local value = Promise.retry(canFail, MAX_RETRIES, "foo", "bar", "baz") -- args to send to canFail
	```

	@since 3.0.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param ...? P
]=]
function Promise.retry(callback, times, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			return Promise.retry(callback, times - 1, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, waiting `seconds` seconds between each
	retry, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	@since v3.2.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param seconds number
	@param ...? P
]=]
function Promise.retryWithDelay(callback, times, seconds, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 (times) to Promise.retry must be a number")
	assert(type(seconds) == "number", "Parameter #3 (seconds) to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			Promise.delay(seconds):await()

			return Promise.retryWithDelay(callback, times - 1, seconds, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Converts an event into a Promise which resolves the next time the event fires.

	The optional `predicate` callback, if passed, will receive the event arguments and should return `true` or `false`, based on if this fired event should resolve the Promise or not. If `true`, the Promise resolves. If `false`, nothing happens and the predicate will be rerun the next time the event fires.

	The Promise will resolve with the event arguments.

	:::tip
	This function will work given any object with a `Connect` method. This includes all Roblox events.
	:::

	```lua
	-- Creates a Promise which only resolves when `somePart` is touched
	-- by a part named `"Something specific"`.
	return Promise.fromEvent(somePart.Touched, function(part)
		return part.Name == "Something specific"
	end)
	```

	@since 3.0.0
	@param event Event -- Any object with a `Connect` method. This includes all Roblox events.
	@param predicate? (...: P) -> boolean -- A function which determines if the Promise should resolve with the given value, or wait for the next event to check again.
	@return Promise<P>
]=]
function Promise.fromEvent(event, predicate)
	predicate = predicate or function()
		return true
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		local connection
		local shouldDisconnect = false

		local function disconnect()
			connection:Disconnect()
			connection = nil
		end

		-- We use shouldDisconnect because if the callback given to Connect is called before
		-- Connect returns, connection will still be nil. This happens with events that queue up
		-- events when there's nothing connected, such as RemoteEvents

		connection = event:Connect(function(...)
			local callbackValue = predicate(...)

			if callbackValue == true then
				resolve(...)

				if connection then
					disconnect()
				else
					shouldDisconnect = true
				end
			elseif type(callbackValue) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)

		if shouldDisconnect and connection then
			return disconnect()
		end

		onCancel(disconnect)
	end)
end

--[=[
	Registers a callback that runs when an unhandled rejection happens. An unhandled rejection happens when a Promise
	is rejected, and the rejection is not observed with `:catch`.

	The callback is called with the actual promise that rejected, followed by the rejection values.

	@since v3.2.0
	@param callback (promise: Promise, ...: any) -- A callback that runs when an unhandled rejection happens.
	@return () -> () -- Function that unregisters the `callback` when called
]=]
function Promise.onUnhandledRejection(callback)
	table.insert(Promise._unhandledRejectionCallbacks, callback)

	return function()
		local index = table.find(Promise._unhandledRejectionCallbacks, callback)

		if index then
			table.remove(Promise._unhandledRejectionCallbacks, index)
		end
	end
end

return Promise
 end, newEnv("roblox-ts-model.include.Promise"))() end)

newModule("RuntimeLib", "ModuleScript", "roblox-ts-model.include.RuntimeLib", "roblox-ts-model.include", function () return setfenv(function() local Promise = require(script.Parent.Promise)

local RunService = game:GetService("RunService")
local ReplicatedFirst = game:GetService("ReplicatedFirst")

local TS = {}

TS.Promise = Promise

local function isPlugin(object)
	return RunService:IsStudio() and object:FindFirstAncestorWhichIsA("Plugin") ~= nil
end

function TS.getModule(object, scope, moduleName)
	if moduleName == nil then
		moduleName = scope
		scope = "@rbxts"
	end

	if RunService:IsRunning() and object:IsDescendantOf(ReplicatedFirst) then
		warn("roblox-ts packages should not be used from ReplicatedFirst!")
	end

	-- ensure modules have fully replicated
	if RunService:IsRunning() and RunService:IsClient() and not isPlugin(object) and not game:IsLoaded() then
		game.Loaded:Wait()
	end

	local globalModules = script.Parent:FindFirstChild("node_modules")
	if not globalModules then
		error("Could not find any modules!", 2)
	end

	repeat
		local modules = object:FindFirstChild("node_modules")
		if modules and modules ~= globalModules then
			modules = modules:FindFirstChild("@rbxts")
		end
		if modules then
			local module = modules:FindFirstChild(moduleName)
			if module then
				return module
			end
		end
		object = object.Parent
	until object == nil or object == globalModules

	local scopedModules = globalModules:FindFirstChild(scope or "@rbxts");
	return (scopedModules or globalModules):FindFirstChild(moduleName) or error("Could not find module: " .. moduleName, 2)
end

-- This is a hash which TS.import uses as a kind of linked-list-like history of [Script who Loaded] -> Library
local currentlyLoading = {}
local registeredLibraries = {}

function TS.import(caller, module, ...)
	for i = 1, select("#", ...) do
		module = module:WaitForChild((select(i, ...)))
	end

	if module.ClassName ~= "ModuleScript" then
		error("Failed to import! Expected ModuleScript, got " .. module.ClassName, 2)
	end

	currentlyLoading[caller] = module

	-- Check to see if a case like this occurs:
	-- module -> Module1 -> Module2 -> module

	-- WHERE currentlyLoading[module] is Module1
	-- and currentlyLoading[Module1] is Module2
	-- and currentlyLoading[Module2] is module

	local currentModule = module
	local depth = 0

	while currentModule do
		depth = depth + 1
		currentModule = currentlyLoading[currentModule]

		if currentModule == module then
			local str = currentModule.Name -- Get the string traceback

			for _ = 1, depth do
				currentModule = currentlyLoading[currentModule]
				str = str .. "  â‡’ " .. currentModule.Name
			end

			error("Failed to import! Detected a circular dependency chain: " .. str, 2)
		end
	end

	if not registeredLibraries[module] then
		if _G[module] then
			error(
				"Invalid module access! Do you have two TS runtimes trying to import this? " .. module:GetFullName(),
				2
			)
		end

		_G[module] = TS
		registeredLibraries[module] = true -- register as already loaded for subsequent calls
	end

	local data = require(module)

	if currentlyLoading[caller] == module then -- Thread-safe cleanup!
		currentlyLoading[caller] = nil
	end

	return data
end

function TS.instanceof(obj, class)
	-- custom Class.instanceof() check
	if type(class) == "table" and type(class.instanceof) == "function" then
		return class.instanceof(obj)
	end

	-- metatable check
	if type(obj) == "table" then
		obj = getmetatable(obj)
		while obj ~= nil do
			if obj == class then
				return true
			end
			local mt = getmetatable(obj)
			if mt then
				obj = mt.__index
			else
				obj = nil
			end
		end
	end

	return false
end

function TS.async(callback)
	return function(...)
		local n = select("#", ...)
		local args = { ... }
		return Promise.new(function(resolve, reject)
			coroutine.wrap(function()
				local ok, result = pcall(callback, unpack(args, 1, n))
				if ok then
					resolve(result)
				else
					reject(result)
				end
			end)()
		end)
	end
end

function TS.await(promise)
	if not Promise.is(promise) then
		return promise
	end

	local status, value = promise:awaitStatus()
	if status == Promise.Status.Resolved then
		return value
	elseif status == Promise.Status.Rejected then
		error(value, 2)
	else
		error("The awaited Promise was cancelled", 2)
	end
end

function TS.bit_lrsh(a, b)
	local absA = math.abs(a)
	local result = bit32.rshift(absA, b)
	if a == absA then
		return result
	else
		return -result - 1
	end
end

TS.TRY_RETURN = 1
TS.TRY_BREAK = 2
TS.TRY_CONTINUE = 3

function TS.try(func, catch, finally)
	local err, traceback
	local success, exitType, returns = xpcall(
		func,
		function(errInner)
			err = errInner
			traceback = debug.traceback()
		end
	)
	if not success and catch then
		local newExitType, newReturns = catch(err, traceback)
		if newExitType then
			exitType, returns = newExitType, newReturns
		end
	end
	if finally then
		local newExitType, newReturns = finally()
		if newExitType then
			exitType, returns = newExitType, newReturns
		end
	end
	return exitType, returns
end

function TS.generator(callback)
	local co = coroutine.create(callback)
	return {
		next = function(...)
			if coroutine.status(co) == "dead" then
				return { done = true }
			else
				local success, value = coroutine.resume(co, ...)
				if success == false then
					error(value, 2)
				end
				return {
					value = value,
					done = coroutine.status(co) == "dead",
				}
			end
		end,
	}
end

return TS
 end, newEnv("roblox-ts-model.include.RuntimeLib"))() end)

newInstance("node_modules", "Folder", "roblox-ts-model.include.node_modules", "roblox-ts-model.include")

newInstance("compiler-types", "Folder", "roblox-ts-model.include.node_modules.compiler-types", "roblox-ts-model.include.node_modules")

newInstance("types", "Folder", "roblox-ts-model.include.node_modules.compiler-types.types", "roblox-ts-model.include.node_modules.compiler-types")

newInstance("hax", "Folder", "roblox-ts-model.include.node_modules.hax", "roblox-ts-model.include.node_modules")

newModule("package-lock", "ModuleScript", "roblox-ts-model.include.node_modules.hax.package-lock", "roblox-ts-model.include.node_modules.hax", function () return setfenv(function() return {
	dependencies = {
		["@eslint/eslintrc"] = {
			dev = true,
			integrity = "sha512-lTVWHs7O2hjBFZunXTZYnYqtB9GakA1lnxIf+gKq2nY5gxkkNi/lQvveW6t8gFdOHTg6nG50Xs95PrLqVpcaLg==",
			requires = {
				ajv = "^6.12.4",
				debug = "^4.3.2",
				espree = "^9.3.1",
				globals = "^13.9.0",
				ignore = "^5.2.0",
				["import-fresh"] = "^3.2.1",
				["js-yaml"] = "^4.1.0",
				minimatch = "^3.0.4",
				["strip-json-comments"] = "^3.1.1",
			},
			resolved = "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.2.2.tgz",
			version = "1.2.2",
		},
		["@humanwhocodes/config-array"] = {
			dev = true,
			integrity = "sha512-ObyMyWxZiCu/yTisA7uzx81s40xR2fD5Cg/2Kq7G02ajkNubJf6BopgDTmDyc3U7sXpNKM8cYOw7s7Tyr+DnCw==",
			requires = {
				["@humanwhocodes/object-schema"] = "^1.2.1",
				debug = "^4.1.1",
				minimatch = "^3.0.4",
			},
			resolved = "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.5.tgz",
			version = "0.9.5",
		},
		["@humanwhocodes/object-schema"] = {
			dev = true,
			integrity = "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
			resolved = "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
			version = "1.2.1",
		},
		["@nodelib/fs.scandir"] = {
			dev = true,
			integrity = "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
			requires = {
				["@nodelib/fs.stat"] = "2.0.5",
				["run-parallel"] = "^1.1.9",
			},
			resolved = "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
			version = "2.1.5",
		},
		["@nodelib/fs.stat"] = {
			dev = true,
			integrity = "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
			resolved = "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
			version = "2.0.5",
		},
		["@nodelib/fs.walk"] = {
			dev = true,
			integrity = "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
			requires = {
				["@nodelib/fs.scandir"] = "2.1.5",
				fastq = "^1.6.0",
			},
			resolved = "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
			version = "1.2.8",
		},
		["@rbxts/compiler-types"] = {
			dev = true,
			integrity = "sha512-iWeioe5WziBTnY+FIT7aQ5bimlw81PYZ5d9WO0h1kX3joEigXPQpn2yHGRxzrqIssqQr47Y6fwknklaaQ6IPMQ==",
			resolved = "https://registry.npmjs.org/@rbxts/compiler-types/-/compiler-types-1.3.3-types.1.tgz",
			version = "1.3.3-types.1",
		},
		["@rbxts/types"] = {
			dev = true,
			integrity = "sha512-dRZt8VJuh8nRNiMtsgjPpEKPr/3Bko2KsB/R9l5yPrdgU7d+uHDV6hdx77NW+q/9u017q8tt6GBL5CNniRk70g==",
			resolved = "https://registry.npmjs.org/@rbxts/types/-/types-1.0.589.tgz",
			version = "1.0.589",
		},
		["@types/json-schema"] = {
			dev = true,
			integrity = "sha512-wOuvG1SN4Us4rez+tylwwwCV1psiNVOkJeM3AUWUNWg/jDQY2+HE/444y5gc+jBmRqASOm2Oeh5c1axHobwRKQ==",
			resolved = "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.11.tgz",
			version = "7.0.11",
		},
		["@types/node"] = {
			dev = true,
			integrity = "sha512-0PJ0vg+JyU0MIan58IOIFRtSvsb7Ri+7Wltx2qAg94eMOrpg4+uuP3aUHCpxXc1i0jCXiC+zIamSZh3l9AbcQA==",
			resolved = "https://registry.npmjs.org/@types/node/-/node-16.11.33.tgz",
			version = "16.11.33",
		},
		["@typescript-eslint/eslint-plugin"] = {
			dev = true,
			integrity = "sha512-YCiy5PUzpAeOPGQ7VSGDEY2NeYUV1B0swde2e0HzokRsHBYjSdF6DZ51OuRZxVPHx0032lXGLvOMls91D8FXlg==",
			requires = {
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/type-utils"] = "5.22.0",
				["@typescript-eslint/utils"] = "5.22.0",
				debug = "^4.3.2",
				["functional-red-black-tree"] = "^1.0.1",
				ignore = "^5.1.8",
				regexpp = "^3.2.0",
				semver = "^7.3.5",
				tsutils = "^3.21.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/experimental-utils"] = {
			dev = true,
			integrity = "sha512-rKxoCUtAHwEH6IcAoVpqipY6Th+YKW7WFspAKu0IFdbdKZpveFBeqxxE9Xn+GWikhq1o03V3VXbxIe+GdhggiQ==",
			requires = {
				["@typescript-eslint/utils"] = "5.22.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/parser"] = {
			dev = true,
			integrity = "sha512-piwC4krUpRDqPaPbFaycN70KCP87+PC5WZmrWs+DlVOxxmF+zI6b6hETv7Quy4s9wbkV16ikMeZgXsvzwI3icQ==",
			requires = {
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/typescript-estree"] = "5.22.0",
				debug = "^4.3.2",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/scope-manager"] = {
			dev = true,
			integrity = "sha512-yA9G5NJgV5esANJCO0oF15MkBO20mIskbZ8ijfmlKIvQKg0ynVKfHZ15/nhAJN5m8Jn3X5qkwriQCiUntC9AbA==",
			requires = {
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/visitor-keys"] = "5.22.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/type-utils"] = {
			dev = true,
			integrity = "sha512-iqfLZIsZhK2OEJ4cQ01xOq3NaCuG5FQRKyHicA3xhZxMgaxQazLUHbH/B2k9y5i7l3+o+B5ND9Mf1AWETeMISA==",
			requires = {
				["@typescript-eslint/utils"] = "5.22.0",
				debug = "^4.3.2",
				tsutils = "^3.21.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/types"] = {
			dev = true,
			integrity = "sha512-T7owcXW4l0v7NTijmjGWwWf/1JqdlWiBzPqzAWhobxft0SiEvMJB56QXmeCQjrPuM8zEfGUKyPQr/L8+cFUBLw==",
			resolved = "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/typescript-estree"] = {
			dev = true,
			integrity = "sha512-EyBEQxvNjg80yinGE2xdhpDYm41so/1kOItl0qrjIiJ1kX/L/L8WWGmJg8ni6eG3DwqmOzDqOhe6763bF92nOw==",
			requires = {
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/visitor-keys"] = "5.22.0",
				debug = "^4.3.2",
				globby = "^11.0.4",
				["is-glob"] = "^4.0.3",
				semver = "^7.3.5",
				tsutils = "^3.21.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/utils"] = {
			dev = true,
			integrity = "sha512-HodsGb037iobrWSUMS7QH6Hl1kppikjA1ELiJlNSTYf/UdMEwzgj0WIp+lBNb6WZ3zTwb0tEz51j0Wee3iJ3wQ==",
			requires = {
				["@types/json-schema"] = "^7.0.9",
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/typescript-estree"] = "5.22.0",
				["eslint-scope"] = "^5.1.1",
				["eslint-utils"] = "^3.0.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["@typescript-eslint/visitor-keys"] = {
			dev = true,
			integrity = "sha512-DbgTqn2Dv5RFWluG88tn0pP6Ex0ROF+dpDO1TNNZdRtLjUr6bdznjA6f/qNqJLjd2PgguAES2Zgxh/JzwzETDg==",
			requires = {
				["@typescript-eslint/types"] = "5.22.0",
				["eslint-visitor-keys"] = "^3.0.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.22.0.tgz",
			version = "5.22.0",
		},
		acorn = {
			dev = true,
			integrity = "sha512-Xx54uLJQZ19lKygFXOWsscKUbsBZW0CPykPhVQdhIeIwrbPmJzqeASDInc8nKBnp/JT6igTs82qPXz069H8I/A==",
			resolved = "https://registry.npmjs.org/acorn/-/acorn-8.7.1.tgz",
			version = "8.7.1",
		},
		["acorn-jsx"] = {
			dev = true,
			integrity = "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
			requires = {
			},
			resolved = "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
			version = "5.3.2",
		},
		ajv = {
			dev = true,
			integrity = "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
			requires = {
				["fast-deep-equal"] = "^3.1.1",
				["fast-json-stable-stringify"] = "^2.0.0",
				["json-schema-traverse"] = "^0.4.1",
				["uri-js"] = "^4.2.2",
			},
			resolved = "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
			version = "6.12.6",
		},
		["ansi-regex"] = {
			dev = true,
			integrity = "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			resolved = "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			version = "5.0.1",
		},
		["ansi-styles"] = {
			dev = true,
			integrity = "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
			requires = {
				["color-convert"] = "^2.0.1",
			},
			resolved = "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
			version = "4.3.0",
		},
		argparse = {
			dev = true,
			integrity = "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
			resolved = "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
			version = "2.0.1",
		},
		["array-union"] = {
			dev = true,
			integrity = "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
			resolved = "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
			version = "2.1.0",
		},
		["balanced-match"] = {
			dev = true,
			integrity = "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
			resolved = "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
			version = "1.0.2",
		},
		["brace-expansion"] = {
			dev = true,
			integrity = "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			requires = {
				["balanced-match"] = "^1.0.0",
				["concat-map"] = "0.0.1",
			},
			resolved = "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			version = "1.1.11",
		},
		braces = {
			dev = true,
			integrity = "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
			requires = {
				["fill-range"] = "^7.0.1",
			},
			resolved = "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
			version = "3.0.2",
		},
		callsites = {
			dev = true,
			integrity = "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
			resolved = "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
			version = "3.1.0",
		},
		chalk = {
			dev = true,
			integrity = "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
			requires = {
				["ansi-styles"] = "^4.1.0",
				["supports-color"] = "^7.1.0",
			},
			resolved = "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
			version = "4.1.2",
		},
		["color-convert"] = {
			dev = true,
			integrity = "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
			requires = {
				["color-name"] = "~1.1.4",
			},
			resolved = "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
			version = "2.0.1",
		},
		["color-name"] = {
			dev = true,
			integrity = "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
			resolved = "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
			version = "1.1.4",
		},
		["concat-map"] = {
			dev = true,
			integrity = "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
			resolved = "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
			version = "0.0.1",
		},
		["cross-spawn"] = {
			dev = true,
			integrity = "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
			requires = {
				["path-key"] = "^3.1.0",
				["shebang-command"] = "^2.0.0",
				which = "^2.0.1",
			},
			resolved = "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
			version = "7.0.3",
		},
		debug = {
			dev = true,
			integrity = "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
			requires = {
				ms = "2.1.2",
			},
			resolved = "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
			version = "4.3.4",
		},
		["deep-is"] = {
			dev = true,
			integrity = "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
			resolved = "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
			version = "0.1.4",
		},
		["dir-glob"] = {
			dev = true,
			integrity = "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
			requires = {
				["path-type"] = "^4.0.0",
			},
			resolved = "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
			version = "3.0.1",
		},
		doctrine = {
			dev = true,
			integrity = "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
			requires = {
				esutils = "^2.0.2",
			},
			resolved = "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
			version = "3.0.0",
		},
		["escape-string-regexp"] = {
			dev = true,
			integrity = "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
			resolved = "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
			version = "4.0.0",
		},
		eslint = {
			dependencies = {
				["eslint-scope"] = {
					dev = true,
					integrity = "sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==",
					requires = {
						esrecurse = "^4.3.0",
						estraverse = "^5.2.0",
					},
					resolved = "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.1.tgz",
					version = "7.1.1",
				},
				estraverse = {
					dev = true,
					integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
					resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
					version = "5.3.0",
				},
			},
			dev = true,
			integrity = "sha512-3/CE4aJX7LNEiE3i6FeodHmI/38GZtWCsAtsymScmzYapx8q1nVVb+eLcLSzATmCPXw5pT4TqVs1E0OmxAd9tw==",
			requires = {
				["@eslint/eslintrc"] = "^1.2.2",
				["@humanwhocodes/config-array"] = "^0.9.2",
				ajv = "^6.10.0",
				chalk = "^4.0.0",
				["cross-spawn"] = "^7.0.2",
				debug = "^4.3.2",
				doctrine = "^3.0.0",
				["escape-string-regexp"] = "^4.0.0",
				["eslint-scope"] = "^7.1.1",
				["eslint-utils"] = "^3.0.0",
				["eslint-visitor-keys"] = "^3.3.0",
				espree = "^9.3.1",
				esquery = "^1.4.0",
				esutils = "^2.0.2",
				["fast-deep-equal"] = "^3.1.3",
				["file-entry-cache"] = "^6.0.1",
				["functional-red-black-tree"] = "^1.0.1",
				["glob-parent"] = "^6.0.1",
				globals = "^13.6.0",
				ignore = "^5.2.0",
				["import-fresh"] = "^3.0.0",
				imurmurhash = "^0.1.4",
				["is-glob"] = "^4.0.0",
				["js-yaml"] = "^4.1.0",
				["json-stable-stringify-without-jsonify"] = "^1.0.1",
				levn = "^0.4.1",
				["lodash.merge"] = "^4.6.2",
				minimatch = "^3.0.4",
				["natural-compare"] = "^1.4.0",
				optionator = "^0.9.1",
				regexpp = "^3.2.0",
				["strip-ansi"] = "^6.0.1",
				["strip-json-comments"] = "^3.1.0",
				["text-table"] = "^0.2.0",
				["v8-compile-cache"] = "^2.0.3",
			},
			resolved = "https://registry.npmjs.org/eslint/-/eslint-8.14.0.tgz",
			version = "8.14.0",
		},
		["eslint-config-prettier"] = {
			dev = true,
			integrity = "sha512-obmWKLUNCnhtQRKc+tmnYuQl0pFU1ibYJQ5BGhTVB08bHe9wC8qUeG7c08dj9XX+AuPj1YSGSQIHl1pnDHZR0Q==",
			requires = {
			},
			resolved = "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-8.5.0.tgz",
			version = "8.5.0",
		},
		["eslint-plugin-prettier"] = {
			dev = true,
			integrity = "sha512-98MqmCJ7vJodoQK359bqQWaxOE0CS8paAz/GgjaZLyex4TTk3g9HugoO89EqWCrFiOqn9EVvcoo7gZzONCWVwQ==",
			requires = {
				["prettier-linter-helpers"] = "^1.0.0",
			},
			resolved = "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-4.0.0.tgz",
			version = "4.0.0",
		},
		["eslint-plugin-roblox-ts"] = {
			dev = true,
			integrity = "sha512-zbwahPiQha5KGwY/J3pVXtyR4ORBSP8qouc4DGfnyGcdz0HOFFu+sACWX2u7/c4HVymtZlKRkTL4uR5qZ+THgg==",
			requires = {
				["@types/node"] = "^16.10.4",
				["@typescript-eslint/experimental-utils"] = "^5.0.0",
				typescript = "^4.4.4",
			},
			resolved = "https://registry.npmjs.org/eslint-plugin-roblox-ts/-/eslint-plugin-roblox-ts-0.0.32.tgz",
			version = "0.0.32",
		},
		["eslint-scope"] = {
			dev = true,
			integrity = "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
			requires = {
				esrecurse = "^4.3.0",
				estraverse = "^4.1.1",
			},
			resolved = "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
			version = "5.1.1",
		},
		["eslint-utils"] = {
			dependencies = {
				["eslint-visitor-keys"] = {
					dev = true,
					integrity = "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
					resolved = "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
					version = "2.1.0",
				},
			},
			dev = true,
			integrity = "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
			requires = {
				["eslint-visitor-keys"] = "^2.0.0",
			},
			resolved = "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
			version = "3.0.0",
		},
		["eslint-visitor-keys"] = {
			dev = true,
			integrity = "sha512-mQ+suqKJVyeuwGYHAdjMFqjCyfl8+Ldnxuyp3ldiMBFKkvytrXUZWaiPCEav8qDHKty44bD+qV1IP4T+w+xXRA==",
			resolved = "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.3.0.tgz",
			version = "3.3.0",
		},
		espree = {
			dev = true,
			integrity = "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
			requires = {
				acorn = "^8.7.0",
				["acorn-jsx"] = "^5.3.1",
				["eslint-visitor-keys"] = "^3.3.0",
			},
			resolved = "https://registry.npmjs.org/espree/-/espree-9.3.1.tgz",
			version = "9.3.1",
		},
		esquery = {
			dependencies = {
				estraverse = {
					dev = true,
					integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
					resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
					version = "5.3.0",
				},
			},
			dev = true,
			integrity = "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
			requires = {
				estraverse = "^5.1.0",
			},
			resolved = "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
			version = "1.4.0",
		},
		esrecurse = {
			dependencies = {
				estraverse = {
					dev = true,
					integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
					resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
					version = "5.3.0",
				},
			},
			dev = true,
			integrity = "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
			requires = {
				estraverse = "^5.2.0",
			},
			resolved = "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
			version = "4.3.0",
		},
		estraverse = {
			dev = true,
			integrity = "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
			resolved = "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
			version = "4.3.0",
		},
		esutils = {
			dev = true,
			integrity = "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
			resolved = "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
			version = "2.0.3",
		},
		["fast-deep-equal"] = {
			dev = true,
			integrity = "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
			resolved = "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
			version = "3.1.3",
		},
		["fast-diff"] = {
			dev = true,
			integrity = "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
			resolved = "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
			version = "1.2.0",
		},
		["fast-glob"] = {
			dependencies = {
				["glob-parent"] = {
					dev = true,
					integrity = "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
					requires = {
						["is-glob"] = "^4.0.1",
					},
					resolved = "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
					version = "5.1.2",
				},
			},
			dev = true,
			integrity = "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
			requires = {
				["@nodelib/fs.stat"] = "^2.0.2",
				["@nodelib/fs.walk"] = "^1.2.3",
				["glob-parent"] = "^5.1.2",
				merge2 = "^1.3.0",
				micromatch = "^4.0.4",
			},
			resolved = "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
			version = "3.2.11",
		},
		["fast-json-stable-stringify"] = {
			dev = true,
			integrity = "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
			resolved = "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
			version = "2.1.0",
		},
		["fast-levenshtein"] = {
			dev = true,
			integrity = "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
			resolved = "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
			version = "2.0.6",
		},
		fastq = {
			dev = true,
			integrity = "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
			requires = {
				reusify = "^1.0.4",
			},
			resolved = "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
			version = "1.13.0",
		},
		["file-entry-cache"] = {
			dev = true,
			integrity = "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
			requires = {
				["flat-cache"] = "^3.0.4",
			},
			resolved = "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
			version = "6.0.1",
		},
		["fill-range"] = {
			dev = true,
			integrity = "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
			requires = {
				["to-regex-range"] = "^5.0.1",
			},
			resolved = "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
			version = "7.0.1",
		},
		["flat-cache"] = {
			dev = true,
			integrity = "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
			requires = {
				flatted = "^3.1.0",
				rimraf = "^3.0.2",
			},
			resolved = "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
			version = "3.0.4",
		},
		flatted = {
			dev = true,
			integrity = "sha512-WIWGi2L3DyTUvUrwRKgGi9TwxQMUEqPOPQBVi71R96jZXJdFskXEmf54BoZaS1kknGODoIGASGEzBUYdyMCBJg==",
			resolved = "https://registry.npmjs.org/flatted/-/flatted-3.2.5.tgz",
			version = "3.2.5",
		},
		["fs.realpath"] = {
			dev = true,
			integrity = "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
			resolved = "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
			version = "1.0.0",
		},
		["functional-red-black-tree"] = {
			dev = true,
			integrity = "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
			resolved = "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
			version = "1.0.1",
		},
		glob = {
			dev = true,
			integrity = "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
			requires = {
				["fs.realpath"] = "^1.0.0",
				inflight = "^1.0.4",
				inherits = "2",
				minimatch = "^3.0.4",
				once = "^1.3.0",
				["path-is-absolute"] = "^1.0.0",
			},
			resolved = "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
			version = "7.2.0",
		},
		["glob-parent"] = {
			dev = true,
			integrity = "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
			requires = {
				["is-glob"] = "^4.0.3",
			},
			resolved = "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
			version = "6.0.2",
		},
		globals = {
			dev = true,
			integrity = "sha512-EQ7Q18AJlPwp3vUDL4mKA0KXrXyNIQyWon6T6XQiBQF0XHvRsiCSrWmmeATpUzdJN2HhWZU6Pdl0a9zdep5p6A==",
			requires = {
				["type-fest"] = "^0.20.2",
			},
			resolved = "https://registry.npmjs.org/globals/-/globals-13.13.0.tgz",
			version = "13.13.0",
		},
		globby = {
			dev = true,
			integrity = "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
			requires = {
				["array-union"] = "^2.1.0",
				["dir-glob"] = "^3.0.1",
				["fast-glob"] = "^3.2.9",
				ignore = "^5.2.0",
				merge2 = "^1.4.1",
				slash = "^3.0.0",
			},
			resolved = "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
			version = "11.1.0",
		},
		["has-flag"] = {
			dev = true,
			integrity = "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
			resolved = "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
			version = "4.0.0",
		},
		ignore = {
			dev = true,
			integrity = "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
			resolved = "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
			version = "5.2.0",
		},
		["import-fresh"] = {
			dev = true,
			integrity = "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
			requires = {
				["parent-module"] = "^1.0.0",
				["resolve-from"] = "^4.0.0",
			},
			resolved = "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
			version = "3.3.0",
		},
		imurmurhash = {
			dev = true,
			integrity = "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
			resolved = "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
			version = "0.1.4",
		},
		inflight = {
			dev = true,
			integrity = "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
			requires = {
				once = "^1.3.0",
				wrappy = "1",
			},
			resolved = "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
			version = "1.0.6",
		},
		inherits = {
			dev = true,
			integrity = "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
			resolved = "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
			version = "2.0.4",
		},
		["is-extglob"] = {
			dev = true,
			integrity = "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
			resolved = "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
			version = "2.1.1",
		},
		["is-glob"] = {
			dev = true,
			integrity = "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
			requires = {
				["is-extglob"] = "^2.1.1",
			},
			resolved = "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
			version = "4.0.3",
		},
		["is-number"] = {
			dev = true,
			integrity = "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
			resolved = "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
			version = "7.0.0",
		},
		isexe = {
			dev = true,
			integrity = "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
			resolved = "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
			version = "2.0.0",
		},
		["js-yaml"] = {
			dev = true,
			integrity = "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
			requires = {
				argparse = "^2.0.1",
			},
			resolved = "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
			version = "4.1.0",
		},
		["json-schema-traverse"] = {
			dev = true,
			integrity = "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
			resolved = "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
			version = "0.4.1",
		},
		["json-stable-stringify-without-jsonify"] = {
			dev = true,
			integrity = "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
			resolved = "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
			version = "1.0.1",
		},
		levn = {
			dev = true,
			integrity = "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
			requires = {
				["prelude-ls"] = "^1.2.1",
				["type-check"] = "~0.4.0",
			},
			resolved = "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
			version = "0.4.1",
		},
		["lodash.merge"] = {
			dev = true,
			integrity = "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
			resolved = "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
			version = "4.6.2",
		},
		["lru-cache"] = {
			dev = true,
			integrity = "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
			requires = {
				yallist = "^4.0.0",
			},
			resolved = "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
			version = "6.0.0",
		},
		merge2 = {
			dev = true,
			integrity = "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
			resolved = "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
			version = "1.4.1",
		},
		micromatch = {
			dev = true,
			integrity = "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
			requires = {
				braces = "^3.0.2",
				picomatch = "^2.3.1",
			},
			resolved = "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
			version = "4.0.5",
		},
		minimatch = {
			dev = true,
			integrity = "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			requires = {
				["brace-expansion"] = "^1.1.7",
			},
			resolved = "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			version = "3.1.2",
		},
		ms = {
			dev = true,
			integrity = "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
			resolved = "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
			version = "2.1.2",
		},
		["natural-compare"] = {
			dev = true,
			integrity = "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
			resolved = "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
			version = "1.4.0",
		},
		once = {
			dev = true,
			integrity = "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
			requires = {
				wrappy = "1",
			},
			resolved = "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
			version = "1.4.0",
		},
		optionator = {
			dev = true,
			integrity = "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
			requires = {
				["deep-is"] = "^0.1.3",
				["fast-levenshtein"] = "^2.0.6",
				levn = "^0.4.1",
				["prelude-ls"] = "^1.2.1",
				["type-check"] = "^0.4.0",
				["word-wrap"] = "^1.2.3",
			},
			resolved = "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
			version = "0.9.1",
		},
		["parent-module"] = {
			dev = true,
			integrity = "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
			requires = {
				callsites = "^3.0.0",
			},
			resolved = "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
			version = "1.0.1",
		},
		["path-is-absolute"] = {
			dev = true,
			integrity = "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
			resolved = "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
			version = "1.0.1",
		},
		["path-key"] = {
			dev = true,
			integrity = "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
			resolved = "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
			version = "3.1.1",
		},
		["path-type"] = {
			dev = true,
			integrity = "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
			resolved = "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
			version = "4.0.0",
		},
		picomatch = {
			dev = true,
			integrity = "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			resolved = "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			version = "2.3.1",
		},
		["prelude-ls"] = {
			dev = true,
			integrity = "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
			resolved = "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
			version = "1.2.1",
		},
		prettier = {
			dev = true,
			integrity = "sha512-PkUpF+qoXTqhOeWL9fu7As8LXsIUZ1WYaJiY/a7McAQzxjk82OF0tibkFXVCDImZtWxbvojFjerkiLb0/q8mew==",
			resolved = "https://registry.npmjs.org/prettier/-/prettier-2.6.2.tgz",
			version = "2.6.2",
		},
		["prettier-linter-helpers"] = {
			dev = true,
			integrity = "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
			requires = {
				["fast-diff"] = "^1.1.2",
			},
			resolved = "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
			version = "1.0.0",
		},
		punycode = {
			dev = true,
			integrity = "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
			resolved = "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
			version = "2.1.1",
		},
		["queue-microtask"] = {
			dev = true,
			integrity = "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
			resolved = "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
			version = "1.2.3",
		},
		regexpp = {
			dev = true,
			integrity = "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
			resolved = "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
			version = "3.2.0",
		},
		["resolve-from"] = {
			dev = true,
			integrity = "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
			resolved = "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
			version = "4.0.0",
		},
		reusify = {
			dev = true,
			integrity = "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
			resolved = "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
			version = "1.0.4",
		},
		rimraf = {
			dev = true,
			integrity = "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
			requires = {
				glob = "^7.1.3",
			},
			resolved = "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
			version = "3.0.2",
		},
		["run-parallel"] = {
			dev = true,
			integrity = "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
			requires = {
				["queue-microtask"] = "^1.2.2",
			},
			resolved = "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
			version = "1.2.0",
		},
		semver = {
			dev = true,
			integrity = "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
			requires = {
				["lru-cache"] = "^6.0.0",
			},
			resolved = "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
			version = "7.3.7",
		},
		["shebang-command"] = {
			dev = true,
			integrity = "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
			requires = {
				["shebang-regex"] = "^3.0.0",
			},
			resolved = "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
			version = "2.0.0",
		},
		["shebang-regex"] = {
			dev = true,
			integrity = "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
			resolved = "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
			version = "3.0.0",
		},
		slash = {
			dev = true,
			integrity = "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
			resolved = "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
			version = "3.0.0",
		},
		["strip-ansi"] = {
			dev = true,
			integrity = "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			requires = {
				["ansi-regex"] = "^5.0.1",
			},
			resolved = "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			version = "6.0.1",
		},
		["strip-json-comments"] = {
			dev = true,
			integrity = "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
			resolved = "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
			version = "3.1.1",
		},
		["supports-color"] = {
			dev = true,
			integrity = "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
			requires = {
				["has-flag"] = "^4.0.0",
			},
			resolved = "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
			version = "7.2.0",
		},
		["text-table"] = {
			dev = true,
			integrity = "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
			resolved = "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
			version = "0.2.0",
		},
		["to-regex-range"] = {
			dev = true,
			integrity = "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
			requires = {
				["is-number"] = "^7.0.0",
			},
			resolved = "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
			version = "5.0.1",
		},
		tslib = {
			dev = true,
			integrity = "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
			resolved = "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
			version = "1.14.1",
		},
		tsutils = {
			dev = true,
			integrity = "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
			requires = {
				tslib = "^1.8.1",
			},
			resolved = "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
			version = "3.21.0",
		},
		["type-check"] = {
			dev = true,
			integrity = "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
			requires = {
				["prelude-ls"] = "^1.2.1",
			},
			resolved = "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
			version = "0.4.0",
		},
		["type-fest"] = {
			dev = true,
			integrity = "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
			resolved = "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
			version = "0.20.2",
		},
		typescript = {
			dev = true,
			integrity = "sha512-9ia/jWHIEbo49HfjrLGfKbZSuWo9iTMwXO+Ca3pRsSpbsMbc7/IU8NKdCZVRRBafVPGnoJeFL76ZOAA84I9fEg==",
			resolved = "https://registry.npmjs.org/typescript/-/typescript-4.6.4.tgz",
			version = "4.6.4",
		},
		["uri-js"] = {
			dev = true,
			integrity = "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
			requires = {
				punycode = "^2.1.0",
			},
			resolved = "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
			version = "4.4.1",
		},
		["v8-compile-cache"] = {
			dev = true,
			integrity = "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
			resolved = "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
			version = "2.3.0",
		},
		which = {
			dev = true,
			integrity = "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
			requires = {
				isexe = "^2.0.0",
			},
			resolved = "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
			version = "2.0.2",
		},
		["word-wrap"] = {
			dev = true,
			integrity = "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
			resolved = "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
			version = "1.2.3",
		},
		wrappy = {
			dev = true,
			integrity = "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
			resolved = "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
			version = "1.0.2",
		},
		yallist = {
			dev = true,
			integrity = "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
			resolved = "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
			version = "4.0.0",
		},
	},
	lockfileVersion = 2,
	name = "@rbxts/hax",
	packages = {
		[""] = {
			devDependencies = {
				["@rbxts/compiler-types"] = "^1.3.3-types.1",
				["@rbxts/types"] = "^1.0.589",
				["@typescript-eslint/eslint-plugin"] = "^5.22.0",
				["@typescript-eslint/parser"] = "^5.22.0",
				eslint = "^8.14.0",
				["eslint-config-prettier"] = "^8.5.0",
				["eslint-plugin-prettier"] = "^4.0.0",
				["eslint-plugin-roblox-ts"] = "^0.0.32",
				prettier = "^2.6.2",
				typescript = "^4.6.4",
			},
			license = "MIT",
			name = "@rbxts/rbxts-hax",
			version = "1.1.0",
		},
		["node_modules/@eslint/eslintrc"] = {
			dependencies = {
				ajv = "^6.12.4",
				debug = "^4.3.2",
				espree = "^9.3.1",
				globals = "^13.9.0",
				ignore = "^5.2.0",
				["import-fresh"] = "^3.2.1",
				["js-yaml"] = "^4.1.0",
				minimatch = "^3.0.4",
				["strip-json-comments"] = "^3.1.1",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			integrity = "sha512-lTVWHs7O2hjBFZunXTZYnYqtB9GakA1lnxIf+gKq2nY5gxkkNi/lQvveW6t8gFdOHTg6nG50Xs95PrLqVpcaLg==",
			resolved = "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.2.2.tgz",
			version = "1.2.2",
		},
		["node_modules/@humanwhocodes/config-array"] = {
			dependencies = {
				["@humanwhocodes/object-schema"] = "^1.2.1",
				debug = "^4.1.1",
				minimatch = "^3.0.4",
			},
			dev = true,
			engines = {
				node = ">=10.10.0",
			},
			integrity = "sha512-ObyMyWxZiCu/yTisA7uzx81s40xR2fD5Cg/2Kq7G02ajkNubJf6BopgDTmDyc3U7sXpNKM8cYOw7s7Tyr+DnCw==",
			resolved = "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.5.tgz",
			version = "0.9.5",
		},
		["node_modules/@humanwhocodes/object-schema"] = {
			dev = true,
			integrity = "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
			resolved = "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
			version = "1.2.1",
		},
		["node_modules/@nodelib/fs.scandir"] = {
			dependencies = {
				["@nodelib/fs.stat"] = "2.0.5",
				["run-parallel"] = "^1.1.9",
			},
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
			resolved = "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
			version = "2.1.5",
		},
		["node_modules/@nodelib/fs.stat"] = {
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
			resolved = "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
			version = "2.0.5",
		},
		["node_modules/@nodelib/fs.walk"] = {
			dependencies = {
				["@nodelib/fs.scandir"] = "2.1.5",
				fastq = "^1.6.0",
			},
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
			resolved = "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
			version = "1.2.8",
		},
		["node_modules/@rbxts/compiler-types"] = {
			dev = true,
			integrity = "sha512-iWeioe5WziBTnY+FIT7aQ5bimlw81PYZ5d9WO0h1kX3joEigXPQpn2yHGRxzrqIssqQr47Y6fwknklaaQ6IPMQ==",
			resolved = "https://registry.npmjs.org/@rbxts/compiler-types/-/compiler-types-1.3.3-types.1.tgz",
			version = "1.3.3-types.1",
		},
		["node_modules/@rbxts/types"] = {
			dev = true,
			integrity = "sha512-dRZt8VJuh8nRNiMtsgjPpEKPr/3Bko2KsB/R9l5yPrdgU7d+uHDV6hdx77NW+q/9u017q8tt6GBL5CNniRk70g==",
			resolved = "https://registry.npmjs.org/@rbxts/types/-/types-1.0.589.tgz",
			version = "1.0.589",
		},
		["node_modules/@types/json-schema"] = {
			dev = true,
			integrity = "sha512-wOuvG1SN4Us4rez+tylwwwCV1psiNVOkJeM3AUWUNWg/jDQY2+HE/444y5gc+jBmRqASOm2Oeh5c1axHobwRKQ==",
			resolved = "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.11.tgz",
			version = "7.0.11",
		},
		["node_modules/@types/node"] = {
			dev = true,
			integrity = "sha512-0PJ0vg+JyU0MIan58IOIFRtSvsb7Ri+7Wltx2qAg94eMOrpg4+uuP3aUHCpxXc1i0jCXiC+zIamSZh3l9AbcQA==",
			resolved = "https://registry.npmjs.org/@types/node/-/node-16.11.33.tgz",
			version = "16.11.33",
		},
		["node_modules/@typescript-eslint/eslint-plugin"] = {
			dependencies = {
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/type-utils"] = "5.22.0",
				["@typescript-eslint/utils"] = "5.22.0",
				debug = "^4.3.2",
				["functional-red-black-tree"] = "^1.0.1",
				ignore = "^5.1.8",
				regexpp = "^3.2.0",
				semver = "^7.3.5",
				tsutils = "^3.21.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-YCiy5PUzpAeOPGQ7VSGDEY2NeYUV1B0swde2e0HzokRsHBYjSdF6DZ51OuRZxVPHx0032lXGLvOMls91D8FXlg==",
			peerDependencies = {
				["@typescript-eslint/parser"] = "^5.0.0",
				eslint = "^6.0.0 || ^7.0.0 || ^8.0.0",
			},
			peerDependenciesMeta = {
				typescript = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/experimental-utils"] = {
			dependencies = {
				["@typescript-eslint/utils"] = "5.22.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-rKxoCUtAHwEH6IcAoVpqipY6Th+YKW7WFspAKu0IFdbdKZpveFBeqxxE9Xn+GWikhq1o03V3VXbxIe+GdhggiQ==",
			peerDependencies = {
				eslint = "^6.0.0 || ^7.0.0 || ^8.0.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/parser"] = {
			dependencies = {
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/typescript-estree"] = "5.22.0",
				debug = "^4.3.2",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-piwC4krUpRDqPaPbFaycN70KCP87+PC5WZmrWs+DlVOxxmF+zI6b6hETv7Quy4s9wbkV16ikMeZgXsvzwI3icQ==",
			peerDependencies = {
				eslint = "^6.0.0 || ^7.0.0 || ^8.0.0",
			},
			peerDependenciesMeta = {
				typescript = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/scope-manager"] = {
			dependencies = {
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/visitor-keys"] = "5.22.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-yA9G5NJgV5esANJCO0oF15MkBO20mIskbZ8ijfmlKIvQKg0ynVKfHZ15/nhAJN5m8Jn3X5qkwriQCiUntC9AbA==",
			resolved = "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/type-utils"] = {
			dependencies = {
				["@typescript-eslint/utils"] = "5.22.0",
				debug = "^4.3.2",
				tsutils = "^3.21.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-iqfLZIsZhK2OEJ4cQ01xOq3NaCuG5FQRKyHicA3xhZxMgaxQazLUHbH/B2k9y5i7l3+o+B5ND9Mf1AWETeMISA==",
			peerDependencies = {
				eslint = "*",
			},
			peerDependenciesMeta = {
				typescript = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/types"] = {
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-T7owcXW4l0v7NTijmjGWwWf/1JqdlWiBzPqzAWhobxft0SiEvMJB56QXmeCQjrPuM8zEfGUKyPQr/L8+cFUBLw==",
			resolved = "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/typescript-estree"] = {
			dependencies = {
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/visitor-keys"] = "5.22.0",
				debug = "^4.3.2",
				globby = "^11.0.4",
				["is-glob"] = "^4.0.3",
				semver = "^7.3.5",
				tsutils = "^3.21.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-EyBEQxvNjg80yinGE2xdhpDYm41so/1kOItl0qrjIiJ1kX/L/L8WWGmJg8ni6eG3DwqmOzDqOhe6763bF92nOw==",
			peerDependenciesMeta = {
				typescript = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/utils"] = {
			dependencies = {
				["@types/json-schema"] = "^7.0.9",
				["@typescript-eslint/scope-manager"] = "5.22.0",
				["@typescript-eslint/types"] = "5.22.0",
				["@typescript-eslint/typescript-estree"] = "5.22.0",
				["eslint-scope"] = "^5.1.1",
				["eslint-utils"] = "^3.0.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-HodsGb037iobrWSUMS7QH6Hl1kppikjA1ELiJlNSTYf/UdMEwzgj0WIp+lBNb6WZ3zTwb0tEz51j0Wee3iJ3wQ==",
			peerDependencies = {
				eslint = "^6.0.0 || ^7.0.0 || ^8.0.0",
			},
			resolved = "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/@typescript-eslint/visitor-keys"] = {
			dependencies = {
				["@typescript-eslint/types"] = "5.22.0",
				["eslint-visitor-keys"] = "^3.0.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				type = "opencollective",
				url = "https://opencollective.com/typescript-eslint",
			},
			integrity = "sha512-DbgTqn2Dv5RFWluG88tn0pP6Ex0ROF+dpDO1TNNZdRtLjUr6bdznjA6f/qNqJLjd2PgguAES2Zgxh/JzwzETDg==",
			resolved = "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.22.0.tgz",
			version = "5.22.0",
		},
		["node_modules/acorn"] = {
			bin = {
				acorn = "bin/acorn",
			},
			dev = true,
			engines = {
				node = ">=0.4.0",
			},
			integrity = "sha512-Xx54uLJQZ19lKygFXOWsscKUbsBZW0CPykPhVQdhIeIwrbPmJzqeASDInc8nKBnp/JT6igTs82qPXz069H8I/A==",
			resolved = "https://registry.npmjs.org/acorn/-/acorn-8.7.1.tgz",
			version = "8.7.1",
		},
		["node_modules/acorn-jsx"] = {
			dev = true,
			integrity = "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
			peerDependencies = {
				acorn = "^6.0.0 || ^7.0.0 || ^8.0.0",
			},
			resolved = "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
			version = "5.3.2",
		},
		["node_modules/ajv"] = {
			dependencies = {
				["fast-deep-equal"] = "^3.1.1",
				["fast-json-stable-stringify"] = "^2.0.0",
				["json-schema-traverse"] = "^0.4.1",
				["uri-js"] = "^4.2.2",
			},
			dev = true,
			funding = {
				type = "github",
				url = "https://github.com/sponsors/epoberezkin",
			},
			integrity = "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
			resolved = "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
			version = "6.12.6",
		},
		["node_modules/ansi-regex"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			resolved = "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			version = "5.0.1",
		},
		["node_modules/ansi-styles"] = {
			dependencies = {
				["color-convert"] = "^2.0.1",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			funding = {
				url = "https://github.com/chalk/ansi-styles?sponsor=1",
			},
			integrity = "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
			resolved = "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
			version = "4.3.0",
		},
		["node_modules/argparse"] = {
			dev = true,
			integrity = "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
			resolved = "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
			version = "2.0.1",
		},
		["node_modules/array-union"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
			resolved = "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
			version = "2.1.0",
		},
		["node_modules/balanced-match"] = {
			dev = true,
			integrity = "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
			resolved = "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
			version = "1.0.2",
		},
		["node_modules/brace-expansion"] = {
			dependencies = {
				["balanced-match"] = "^1.0.0",
				["concat-map"] = "0.0.1",
			},
			dev = true,
			integrity = "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			resolved = "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			version = "1.1.11",
		},
		["node_modules/braces"] = {
			dependencies = {
				["fill-range"] = "^7.0.1",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
			resolved = "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
			version = "3.0.2",
		},
		["node_modules/callsites"] = {
			dev = true,
			engines = {
				node = ">=6",
			},
			integrity = "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
			resolved = "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
			version = "3.1.0",
		},
		["node_modules/chalk"] = {
			dependencies = {
				["ansi-styles"] = "^4.1.0",
				["supports-color"] = "^7.1.0",
			},
			dev = true,
			engines = {
				node = ">=10",
			},
			funding = {
				url = "https://github.com/chalk/chalk?sponsor=1",
			},
			integrity = "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
			resolved = "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
			version = "4.1.2",
		},
		["node_modules/color-convert"] = {
			dependencies = {
				["color-name"] = "~1.1.4",
			},
			dev = true,
			engines = {
				node = ">=7.0.0",
			},
			integrity = "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
			resolved = "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
			version = "2.0.1",
		},
		["node_modules/color-name"] = {
			dev = true,
			integrity = "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
			resolved = "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
			version = "1.1.4",
		},
		["node_modules/concat-map"] = {
			dev = true,
			integrity = "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
			resolved = "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
			version = "0.0.1",
		},
		["node_modules/cross-spawn"] = {
			dependencies = {
				["path-key"] = "^3.1.0",
				["shebang-command"] = "^2.0.0",
				which = "^2.0.1",
			},
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
			resolved = "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
			version = "7.0.3",
		},
		["node_modules/debug"] = {
			dependencies = {
				ms = "2.1.2",
			},
			dev = true,
			engines = {
				node = ">=6.0",
			},
			integrity = "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
			peerDependenciesMeta = {
				["supports-color"] = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
			version = "4.3.4",
		},
		["node_modules/deep-is"] = {
			dev = true,
			integrity = "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
			resolved = "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
			version = "0.1.4",
		},
		["node_modules/dir-glob"] = {
			dependencies = {
				["path-type"] = "^4.0.0",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
			resolved = "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
			version = "3.0.1",
		},
		["node_modules/doctrine"] = {
			dependencies = {
				esutils = "^2.0.2",
			},
			dev = true,
			engines = {
				node = ">=6.0.0",
			},
			integrity = "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
			resolved = "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
			version = "3.0.0",
		},
		["node_modules/escape-string-regexp"] = {
			dev = true,
			engines = {
				node = ">=10",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
			resolved = "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
			version = "4.0.0",
		},
		["node_modules/eslint"] = {
			bin = {
				eslint = "bin/eslint.js",
			},
			dependencies = {
				["@eslint/eslintrc"] = "^1.2.2",
				["@humanwhocodes/config-array"] = "^0.9.2",
				ajv = "^6.10.0",
				chalk = "^4.0.0",
				["cross-spawn"] = "^7.0.2",
				debug = "^4.3.2",
				doctrine = "^3.0.0",
				["escape-string-regexp"] = "^4.0.0",
				["eslint-scope"] = "^7.1.1",
				["eslint-utils"] = "^3.0.0",
				["eslint-visitor-keys"] = "^3.3.0",
				espree = "^9.3.1",
				esquery = "^1.4.0",
				esutils = "^2.0.2",
				["fast-deep-equal"] = "^3.1.3",
				["file-entry-cache"] = "^6.0.1",
				["functional-red-black-tree"] = "^1.0.1",
				["glob-parent"] = "^6.0.1",
				globals = "^13.6.0",
				ignore = "^5.2.0",
				["import-fresh"] = "^3.0.0",
				imurmurhash = "^0.1.4",
				["is-glob"] = "^4.0.0",
				["js-yaml"] = "^4.1.0",
				["json-stable-stringify-without-jsonify"] = "^1.0.1",
				levn = "^0.4.1",
				["lodash.merge"] = "^4.6.2",
				minimatch = "^3.0.4",
				["natural-compare"] = "^1.4.0",
				optionator = "^0.9.1",
				regexpp = "^3.2.0",
				["strip-ansi"] = "^6.0.1",
				["strip-json-comments"] = "^3.1.0",
				["text-table"] = "^0.2.0",
				["v8-compile-cache"] = "^2.0.3",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			funding = {
				url = "https://opencollective.com/eslint",
			},
			integrity = "sha512-3/CE4aJX7LNEiE3i6FeodHmI/38GZtWCsAtsymScmzYapx8q1nVVb+eLcLSzATmCPXw5pT4TqVs1E0OmxAd9tw==",
			resolved = "https://registry.npmjs.org/eslint/-/eslint-8.14.0.tgz",
			version = "8.14.0",
		},
		["node_modules/eslint-config-prettier"] = {
			bin = {
				["eslint-config-prettier"] = "bin/cli.js",
			},
			dev = true,
			integrity = "sha512-obmWKLUNCnhtQRKc+tmnYuQl0pFU1ibYJQ5BGhTVB08bHe9wC8qUeG7c08dj9XX+AuPj1YSGSQIHl1pnDHZR0Q==",
			peerDependencies = {
				eslint = ">=7.0.0",
			},
			resolved = "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-8.5.0.tgz",
			version = "8.5.0",
		},
		["node_modules/eslint-plugin-prettier"] = {
			dependencies = {
				["prettier-linter-helpers"] = "^1.0.0",
			},
			dev = true,
			engines = {
				node = ">=6.0.0",
			},
			integrity = "sha512-98MqmCJ7vJodoQK359bqQWaxOE0CS8paAz/GgjaZLyex4TTk3g9HugoO89EqWCrFiOqn9EVvcoo7gZzONCWVwQ==",
			peerDependencies = {
				eslint = ">=7.28.0",
				prettier = ">=2.0.0",
			},
			peerDependenciesMeta = {
				["eslint-config-prettier"] = {
					optional = true,
				},
			},
			resolved = "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-4.0.0.tgz",
			version = "4.0.0",
		},
		["node_modules/eslint-plugin-roblox-ts"] = {
			dependencies = {
				["@types/node"] = "^16.10.4",
				["@typescript-eslint/experimental-utils"] = "^5.0.0",
				typescript = "^4.4.4",
			},
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha512-zbwahPiQha5KGwY/J3pVXtyR4ORBSP8qouc4DGfnyGcdz0HOFFu+sACWX2u7/c4HVymtZlKRkTL4uR5qZ+THgg==",
			resolved = "https://registry.npmjs.org/eslint-plugin-roblox-ts/-/eslint-plugin-roblox-ts-0.0.32.tgz",
			version = "0.0.32",
		},
		["node_modules/eslint-scope"] = {
			dependencies = {
				esrecurse = "^4.3.0",
				estraverse = "^4.1.1",
			},
			dev = true,
			engines = {
				node = ">=8.0.0",
			},
			integrity = "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
			resolved = "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
			version = "5.1.1",
		},
		["node_modules/eslint-utils"] = {
			dependencies = {
				["eslint-visitor-keys"] = "^2.0.0",
			},
			dev = true,
			engines = {
				node = "^10.0.0 || ^12.0.0 || >= 14.0.0",
			},
			funding = {
				url = "https://github.com/sponsors/mysticatea",
			},
			integrity = "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
			peerDependencies = {
				eslint = ">=5",
			},
			resolved = "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
			version = "3.0.0",
		},
		["node_modules/eslint-utils/node_modules/eslint-visitor-keys"] = {
			dev = true,
			engines = {
				node = ">=10",
			},
			integrity = "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
			resolved = "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
			version = "2.1.0",
		},
		["node_modules/eslint-visitor-keys"] = {
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			integrity = "sha512-mQ+suqKJVyeuwGYHAdjMFqjCyfl8+Ldnxuyp3ldiMBFKkvytrXUZWaiPCEav8qDHKty44bD+qV1IP4T+w+xXRA==",
			resolved = "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.3.0.tgz",
			version = "3.3.0",
		},
		["node_modules/eslint/node_modules/eslint-scope"] = {
			dependencies = {
				esrecurse = "^4.3.0",
				estraverse = "^5.2.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			integrity = "sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==",
			resolved = "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.1.tgz",
			version = "7.1.1",
		},
		["node_modules/eslint/node_modules/estraverse"] = {
			dev = true,
			engines = {
				node = ">=4.0",
			},
			integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
			resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
			version = "5.3.0",
		},
		["node_modules/espree"] = {
			dependencies = {
				acorn = "^8.7.0",
				["acorn-jsx"] = "^5.3.1",
				["eslint-visitor-keys"] = "^3.3.0",
			},
			dev = true,
			engines = {
				node = "^12.22.0 || ^14.17.0 || >=16.0.0",
			},
			integrity = "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
			resolved = "https://registry.npmjs.org/espree/-/espree-9.3.1.tgz",
			version = "9.3.1",
		},
		["node_modules/esquery"] = {
			dependencies = {
				estraverse = "^5.1.0",
			},
			dev = true,
			engines = {
				node = ">=0.10",
			},
			integrity = "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
			resolved = "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
			version = "1.4.0",
		},
		["node_modules/esquery/node_modules/estraverse"] = {
			dev = true,
			engines = {
				node = ">=4.0",
			},
			integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
			resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
			version = "5.3.0",
		},
		["node_modules/esrecurse"] = {
			dependencies = {
				estraverse = "^5.2.0",
			},
			dev = true,
			engines = {
				node = ">=4.0",
			},
			integrity = "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
			resolved = "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
			version = "4.3.0",
		},
		["node_modules/esrecurse/node_modules/estraverse"] = {
			dev = true,
			engines = {
				node = ">=4.0",
			},
			integrity = "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
			resolved = "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
			version = "5.3.0",
		},
		["node_modules/estraverse"] = {
			dev = true,
			engines = {
				node = ">=4.0",
			},
			integrity = "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
			resolved = "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
			version = "4.3.0",
		},
		["node_modules/esutils"] = {
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
			resolved = "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
			version = "2.0.3",
		},
		["node_modules/fast-deep-equal"] = {
			dev = true,
			integrity = "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
			resolved = "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
			version = "3.1.3",
		},
		["node_modules/fast-diff"] = {
			dev = true,
			integrity = "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
			resolved = "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
			version = "1.2.0",
		},
		["node_modules/fast-glob"] = {
			dependencies = {
				["@nodelib/fs.stat"] = "^2.0.2",
				["@nodelib/fs.walk"] = "^1.2.3",
				["glob-parent"] = "^5.1.2",
				merge2 = "^1.3.0",
				micromatch = "^4.0.4",
			},
			dev = true,
			engines = {
				node = ">=8.6.0",
			},
			integrity = "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
			resolved = "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
			version = "3.2.11",
		},
		["node_modules/fast-glob/node_modules/glob-parent"] = {
			dependencies = {
				["is-glob"] = "^4.0.1",
			},
			dev = true,
			engines = {
				node = ">= 6",
			},
			integrity = "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
			resolved = "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
			version = "5.1.2",
		},
		["node_modules/fast-json-stable-stringify"] = {
			dev = true,
			integrity = "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
			resolved = "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
			version = "2.1.0",
		},
		["node_modules/fast-levenshtein"] = {
			dev = true,
			integrity = "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
			resolved = "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
			version = "2.0.6",
		},
		["node_modules/fastq"] = {
			dependencies = {
				reusify = "^1.0.4",
			},
			dev = true,
			integrity = "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
			resolved = "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
			version = "1.13.0",
		},
		["node_modules/file-entry-cache"] = {
			dependencies = {
				["flat-cache"] = "^3.0.4",
			},
			dev = true,
			engines = {
				node = "^10.12.0 || >=12.0.0",
			},
			integrity = "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
			resolved = "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
			version = "6.0.1",
		},
		["node_modules/fill-range"] = {
			dependencies = {
				["to-regex-range"] = "^5.0.1",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
			resolved = "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
			version = "7.0.1",
		},
		["node_modules/flat-cache"] = {
			dependencies = {
				flatted = "^3.1.0",
				rimraf = "^3.0.2",
			},
			dev = true,
			engines = {
				node = "^10.12.0 || >=12.0.0",
			},
			integrity = "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
			resolved = "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
			version = "3.0.4",
		},
		["node_modules/flatted"] = {
			dev = true,
			integrity = "sha512-WIWGi2L3DyTUvUrwRKgGi9TwxQMUEqPOPQBVi71R96jZXJdFskXEmf54BoZaS1kknGODoIGASGEzBUYdyMCBJg==",
			resolved = "https://registry.npmjs.org/flatted/-/flatted-3.2.5.tgz",
			version = "3.2.5",
		},
		["node_modules/fs.realpath"] = {
			dev = true,
			integrity = "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
			resolved = "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
			version = "1.0.0",
		},
		["node_modules/functional-red-black-tree"] = {
			dev = true,
			integrity = "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
			resolved = "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
			version = "1.0.1",
		},
		["node_modules/glob"] = {
			dependencies = {
				["fs.realpath"] = "^1.0.0",
				inflight = "^1.0.4",
				inherits = "2",
				minimatch = "^3.0.4",
				once = "^1.3.0",
				["path-is-absolute"] = "^1.0.0",
			},
			dev = true,
			engines = {
				node = "*",
			},
			funding = {
				url = "https://github.com/sponsors/isaacs",
			},
			integrity = "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
			resolved = "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
			version = "7.2.0",
		},
		["node_modules/glob-parent"] = {
			dependencies = {
				["is-glob"] = "^4.0.3",
			},
			dev = true,
			engines = {
				node = ">=10.13.0",
			},
			integrity = "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
			resolved = "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
			version = "6.0.2",
		},
		["node_modules/globals"] = {
			dependencies = {
				["type-fest"] = "^0.20.2",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-EQ7Q18AJlPwp3vUDL4mKA0KXrXyNIQyWon6T6XQiBQF0XHvRsiCSrWmmeATpUzdJN2HhWZU6Pdl0a9zdep5p6A==",
			resolved = "https://registry.npmjs.org/globals/-/globals-13.13.0.tgz",
			version = "13.13.0",
		},
		["node_modules/globby"] = {
			dependencies = {
				["array-union"] = "^2.1.0",
				["dir-glob"] = "^3.0.1",
				["fast-glob"] = "^3.2.9",
				ignore = "^5.2.0",
				merge2 = "^1.4.1",
				slash = "^3.0.0",
			},
			dev = true,
			engines = {
				node = ">=10",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
			resolved = "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
			version = "11.1.0",
		},
		["node_modules/has-flag"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
			resolved = "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
			version = "4.0.0",
		},
		["node_modules/ignore"] = {
			dev = true,
			engines = {
				node = ">= 4",
			},
			integrity = "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
			resolved = "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
			version = "5.2.0",
		},
		["node_modules/import-fresh"] = {
			dependencies = {
				["parent-module"] = "^1.0.0",
				["resolve-from"] = "^4.0.0",
			},
			dev = true,
			engines = {
				node = ">=6",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
			resolved = "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
			version = "3.3.0",
		},
		["node_modules/imurmurhash"] = {
			dev = true,
			engines = {
				node = ">=0.8.19",
			},
			integrity = "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
			resolved = "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
			version = "0.1.4",
		},
		["node_modules/inflight"] = {
			dependencies = {
				once = "^1.3.0",
				wrappy = "1",
			},
			dev = true,
			integrity = "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
			resolved = "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
			version = "1.0.6",
		},
		["node_modules/inherits"] = {
			dev = true,
			integrity = "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
			resolved = "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
			version = "2.0.4",
		},
		["node_modules/is-extglob"] = {
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
			resolved = "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
			version = "2.1.1",
		},
		["node_modules/is-glob"] = {
			dependencies = {
				["is-extglob"] = "^2.1.1",
			},
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
			resolved = "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
			version = "4.0.3",
		},
		["node_modules/is-number"] = {
			dev = true,
			engines = {
				node = ">=0.12.0",
			},
			integrity = "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
			resolved = "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
			version = "7.0.0",
		},
		["node_modules/isexe"] = {
			dev = true,
			integrity = "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
			resolved = "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
			version = "2.0.0",
		},
		["node_modules/js-yaml"] = {
			bin = {
				["js-yaml"] = "bin/js-yaml.js",
			},
			dependencies = {
				argparse = "^2.0.1",
			},
			dev = true,
			integrity = "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
			resolved = "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
			version = "4.1.0",
		},
		["node_modules/json-schema-traverse"] = {
			dev = true,
			integrity = "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
			resolved = "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
			version = "0.4.1",
		},
		["node_modules/json-stable-stringify-without-jsonify"] = {
			dev = true,
			integrity = "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
			resolved = "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
			version = "1.0.1",
		},
		["node_modules/levn"] = {
			dependencies = {
				["prelude-ls"] = "^1.2.1",
				["type-check"] = "~0.4.0",
			},
			dev = true,
			engines = {
				node = ">= 0.8.0",
			},
			integrity = "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
			resolved = "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
			version = "0.4.1",
		},
		["node_modules/lodash.merge"] = {
			dev = true,
			integrity = "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
			resolved = "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
			version = "4.6.2",
		},
		["node_modules/lru-cache"] = {
			dependencies = {
				yallist = "^4.0.0",
			},
			dev = true,
			engines = {
				node = ">=10",
			},
			integrity = "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
			resolved = "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
			version = "6.0.0",
		},
		["node_modules/merge2"] = {
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
			resolved = "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
			version = "1.4.1",
		},
		["node_modules/micromatch"] = {
			dependencies = {
				braces = "^3.0.2",
				picomatch = "^2.3.1",
			},
			dev = true,
			engines = {
				node = ">=8.6",
			},
			integrity = "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
			resolved = "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
			version = "4.0.5",
		},
		["node_modules/minimatch"] = {
			dependencies = {
				["brace-expansion"] = "^1.1.7",
			},
			dev = true,
			engines = {
				node = "*",
			},
			integrity = "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			resolved = "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			version = "3.1.2",
		},
		["node_modules/ms"] = {
			dev = true,
			integrity = "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
			resolved = "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
			version = "2.1.2",
		},
		["node_modules/natural-compare"] = {
			dev = true,
			integrity = "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
			resolved = "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
			version = "1.4.0",
		},
		["node_modules/once"] = {
			dependencies = {
				wrappy = "1",
			},
			dev = true,
			integrity = "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
			resolved = "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
			version = "1.4.0",
		},
		["node_modules/optionator"] = {
			dependencies = {
				["deep-is"] = "^0.1.3",
				["fast-levenshtein"] = "^2.0.6",
				levn = "^0.4.1",
				["prelude-ls"] = "^1.2.1",
				["type-check"] = "^0.4.0",
				["word-wrap"] = "^1.2.3",
			},
			dev = true,
			engines = {
				node = ">= 0.8.0",
			},
			integrity = "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
			resolved = "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
			version = "0.9.1",
		},
		["node_modules/parent-module"] = {
			dependencies = {
				callsites = "^3.0.0",
			},
			dev = true,
			engines = {
				node = ">=6",
			},
			integrity = "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
			resolved = "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
			version = "1.0.1",
		},
		["node_modules/path-is-absolute"] = {
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
			resolved = "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
			version = "1.0.1",
		},
		["node_modules/path-key"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
			resolved = "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
			version = "3.1.1",
		},
		["node_modules/path-type"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
			resolved = "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
			version = "4.0.0",
		},
		["node_modules/picomatch"] = {
			dev = true,
			engines = {
				node = ">=8.6",
			},
			funding = {
				url = "https://github.com/sponsors/jonschlinkert",
			},
			integrity = "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			resolved = "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			version = "2.3.1",
		},
		["node_modules/prelude-ls"] = {
			dev = true,
			engines = {
				node = ">= 0.8.0",
			},
			integrity = "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
			resolved = "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
			version = "1.2.1",
		},
		["node_modules/prettier"] = {
			bin = {
				prettier = "bin-prettier.js",
			},
			dev = true,
			engines = {
				node = ">=10.13.0",
			},
			funding = {
				url = "https://github.com/prettier/prettier?sponsor=1",
			},
			integrity = "sha512-PkUpF+qoXTqhOeWL9fu7As8LXsIUZ1WYaJiY/a7McAQzxjk82OF0tibkFXVCDImZtWxbvojFjerkiLb0/q8mew==",
			resolved = "https://registry.npmjs.org/prettier/-/prettier-2.6.2.tgz",
			version = "2.6.2",
		},
		["node_modules/prettier-linter-helpers"] = {
			dependencies = {
				["fast-diff"] = "^1.1.2",
			},
			dev = true,
			engines = {
				node = ">=6.0.0",
			},
			integrity = "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
			resolved = "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
			version = "1.0.0",
		},
		["node_modules/punycode"] = {
			dev = true,
			engines = {
				node = ">=6",
			},
			integrity = "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
			resolved = "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
			version = "2.1.1",
		},
		["node_modules/queue-microtask"] = {
			dev = true,
			funding = {{
				type = "github",
				url = "https://github.com/sponsors/feross",
			}, {
				type = "patreon",
				url = "https://www.patreon.com/feross",
			}, {
				type = "consulting",
				url = "https://feross.org/support",
			}},
			integrity = "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
			resolved = "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
			version = "1.2.3",
		},
		["node_modules/regexpp"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			funding = {
				url = "https://github.com/sponsors/mysticatea",
			},
			integrity = "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
			resolved = "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
			version = "3.2.0",
		},
		["node_modules/resolve-from"] = {
			dev = true,
			engines = {
				node = ">=4",
			},
			integrity = "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
			resolved = "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
			version = "4.0.0",
		},
		["node_modules/reusify"] = {
			dev = true,
			engines = {
				iojs = ">=1.0.0",
				node = ">=0.10.0",
			},
			integrity = "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
			resolved = "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
			version = "1.0.4",
		},
		["node_modules/rimraf"] = {
			bin = {
				rimraf = "bin.js",
			},
			dependencies = {
				glob = "^7.1.3",
			},
			dev = true,
			funding = {
				url = "https://github.com/sponsors/isaacs",
			},
			integrity = "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
			resolved = "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
			version = "3.0.2",
		},
		["node_modules/run-parallel"] = {
			dependencies = {
				["queue-microtask"] = "^1.2.2",
			},
			dev = true,
			funding = {{
				type = "github",
				url = "https://github.com/sponsors/feross",
			}, {
				type = "patreon",
				url = "https://www.patreon.com/feross",
			}, {
				type = "consulting",
				url = "https://feross.org/support",
			}},
			integrity = "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
			resolved = "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
			version = "1.2.0",
		},
		["node_modules/semver"] = {
			bin = {
				semver = "bin/semver.js",
			},
			dependencies = {
				["lru-cache"] = "^6.0.0",
			},
			dev = true,
			engines = {
				node = ">=10",
			},
			integrity = "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
			resolved = "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
			version = "7.3.7",
		},
		["node_modules/shebang-command"] = {
			dependencies = {
				["shebang-regex"] = "^3.0.0",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
			resolved = "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
			version = "2.0.0",
		},
		["node_modules/shebang-regex"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
			resolved = "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
			version = "3.0.0",
		},
		["node_modules/slash"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
			resolved = "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
			version = "3.0.0",
		},
		["node_modules/strip-ansi"] = {
			dependencies = {
				["ansi-regex"] = "^5.0.1",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			resolved = "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			version = "6.0.1",
		},
		["node_modules/strip-json-comments"] = {
			dev = true,
			engines = {
				node = ">=8",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
			resolved = "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
			version = "3.1.1",
		},
		["node_modules/supports-color"] = {
			dependencies = {
				["has-flag"] = "^4.0.0",
			},
			dev = true,
			engines = {
				node = ">=8",
			},
			integrity = "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
			resolved = "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
			version = "7.2.0",
		},
		["node_modules/text-table"] = {
			dev = true,
			integrity = "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
			resolved = "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
			version = "0.2.0",
		},
		["node_modules/to-regex-range"] = {
			dependencies = {
				["is-number"] = "^7.0.0",
			},
			dev = true,
			engines = {
				node = ">=8.0",
			},
			integrity = "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
			resolved = "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
			version = "5.0.1",
		},
		["node_modules/tslib"] = {
			dev = true,
			integrity = "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
			resolved = "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
			version = "1.14.1",
		},
		["node_modules/tsutils"] = {
			dependencies = {
				tslib = "^1.8.1",
			},
			dev = true,
			engines = {
				node = ">= 6",
			},
			integrity = "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
			peerDependencies = {
				typescript = ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta",
			},
			resolved = "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
			version = "3.21.0",
		},
		["node_modules/type-check"] = {
			dependencies = {
				["prelude-ls"] = "^1.2.1",
			},
			dev = true,
			engines = {
				node = ">= 0.8.0",
			},
			integrity = "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
			resolved = "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
			version = "0.4.0",
		},
		["node_modules/type-fest"] = {
			dev = true,
			engines = {
				node = ">=10",
			},
			funding = {
				url = "https://github.com/sponsors/sindresorhus",
			},
			integrity = "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
			resolved = "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
			version = "0.20.2",
		},
		["node_modules/typescript"] = {
			bin = {
				tsc = "bin/tsc",
				tsserver = "bin/tsserver",
			},
			dev = true,
			engines = {
				node = ">=4.2.0",
			},
			integrity = "sha512-9ia/jWHIEbo49HfjrLGfKbZSuWo9iTMwXO+Ca3pRsSpbsMbc7/IU8NKdCZVRRBafVPGnoJeFL76ZOAA84I9fEg==",
			resolved = "https://registry.npmjs.org/typescript/-/typescript-4.6.4.tgz",
			version = "4.6.4",
		},
		["node_modules/uri-js"] = {
			dependencies = {
				punycode = "^2.1.0",
			},
			dev = true,
			integrity = "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
			resolved = "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
			version = "4.4.1",
		},
		["node_modules/v8-compile-cache"] = {
			dev = true,
			integrity = "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
			resolved = "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
			version = "2.3.0",
		},
		["node_modules/which"] = {
			bin = {
				["node-which"] = "bin/node-which",
			},
			dependencies = {
				isexe = "^2.0.0",
			},
			dev = true,
			engines = {
				node = ">= 8",
			},
			integrity = "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
			resolved = "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
			version = "2.0.2",
		},
		["node_modules/word-wrap"] = {
			dev = true,
			engines = {
				node = ">=0.10.0",
			},
			integrity = "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
			resolved = "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
			version = "1.2.3",
		},
		["node_modules/wrappy"] = {
			dev = true,
			integrity = "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
			resolved = "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
			version = "1.0.2",
		},
		["node_modules/yallist"] = {
			dev = true,
			integrity = "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
			resolved = "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
			version = "4.0.0",
		},
	},
	requires = true,
	version = "1.1.0",
} end, newEnv("roblox-ts-model.include.node_modules.hax.package-lock"))() end)

newInstance("types", "Folder", "roblox-ts-model.include.node_modules.hax.types", "roblox-ts-model.include.node_modules.hax")

newInstance("roact", "Folder", "roblox-ts-model.include.node_modules.roact", "roblox-ts-model.include.node_modules")

newModule("src", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src", "roblox-ts-model.include.node_modules.roact", function () return setfenv(function() --~strict
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict({
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {},
})

return Roact
 end, newEnv("roblox-ts-model.include.node_modules.roact.src"))() end)

newModule("Binding", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Binding", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(_newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(_newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(_newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Binding"))() end)

newModule("Component", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Component", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if
		lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate
		or lifecyclePhase == ComponentLifecyclePhase.WillUpdate
		or lifecyclePhase == ComponentLifecyclePhase.Render
		or lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)
	elseif
		lifecyclePhase == ComponentLifecyclePhase.DidMount
		or lifecyclePhase == ComponentLifecyclePhase.DidUpdate
		or lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)
	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(tostring(internalData.componentClass))

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(
			("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
				typeof(validator),
				self.__componentName
			)
		)
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(
			("Property validation failed in %s: %s\n\n%s"):format(
				self.__componentName,
				tostring(failureReason),
				self:getElementTraceback() or "<enable element tracebacks>"
			),
			0
		)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Component"))() end)

newModule("ComponentLifecyclePhase", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.ComponentLifecyclePhase", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.ComponentLifecyclePhase"))() end)

newModule("Config", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Config", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = ("Invalid global configuration key %q. Valid configuration keys are: %s"):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end,
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = ("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(tostring(value), typeof(value), tostring(key))

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Config"))() end)

newModule("ElementKind", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.ElementKind", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.ElementKind"))() end)

newModule("ElementUtils", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.ElementUtils", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.ElementUtils"))() end)

newModule("GlobalConfig", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.GlobalConfig", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.GlobalConfig"))() end)

newModule("Logging", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Logging", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = { "LogInfo {" }

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Logging"))() end)

newModule("None", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.None", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.None"))() end)

newModule("NoopRenderer", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.NoopRenderer", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(_reconciler, _node) end

function NoopRenderer.unmountHostNode(_reconciler, _node) end

function NoopRenderer.updateHostNode(_reconciler, node, _newElement)
	return node
end

return NoopRenderer
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.NoopRenderer"))() end)

newModule("Portal", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Portal", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Portal"))() end)

newInstance("PropMarkers", "Folder", "roblox-ts-model.include.node_modules.roact.src.PropMarkers", "roblox-ts-model.include.node_modules.roact.src")

newModule("Change", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.PropMarkers.Change", "roblox-ts-model.include.node_modules.roact.src.PropMarkers", function () return setfenv(function() --[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(_self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.PropMarkers.Change"))() end)

newModule("Children", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.PropMarkers.Children", "roblox-ts-model.include.node_modules.roact.src.PropMarkers", function () return setfenv(function() local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.PropMarkers.Children"))() end)

newModule("Event", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.PropMarkers.Event", "roblox-ts-model.include.node_modules.roact.src.PropMarkers", function () return setfenv(function() --[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(_self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.PropMarkers.Event"))() end)

newModule("Ref", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.PropMarkers.Ref", "roblox-ts-model.include.node_modules.roact.src.PropMarkers", function () return setfenv(function() local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.PropMarkers.Ref"))() end)

newModule("PureComponent", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.PureComponent", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.PureComponent"))() end)

newModule("RobloxRenderer", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.RobloxRenderer", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(typeof(ref)))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.RobloxRenderer"))() end)

newModule("SingleEventManager", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.SingleEventManager", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount)
			)

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.SingleEventManager"))() end)

newModule("Symbol", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Symbol", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --!nonstrict
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Symbol"))() end)

newModule("Type", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.Type", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.Type"))() end)

newModule("assertDeepEqual", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.assertDeepEqual", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(typeof(a), typeof(b))
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate:gsub("{1}", "first"):gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.assertDeepEqual"))() end)

newModule("assign", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.assign", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.assign"))() end)

newModule("createContext", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createContext", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(_props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
			self.disconnect = nil
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createContext"))() end)

newModule("createElement", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createElement", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createElement"))() end)

newModule("createFragment", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createFragment", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createFragment"))() end)

newModule("createReconciler", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createReconciler", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --!nonstrict
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		-- If updating this node has caused a component higher up the tree to re-render
		-- and updateChildren to be re-entered then this node could already have been
		-- unmounted in the previous updateChildren pass.
		if not virtualNode.wasUnmounted then
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
				if newNode and newNode ~= virtualNode.children[childKey] then
					unmountVirtualNode(newNode)
				end
				return
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if childNode then
						unmountVirtualNode(childNode)
					end
					return
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element or renderResult == nil or typeof(renderResult) == "boolean" then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(
				("%s\n%s"):format(
					"Component returned invalid children:",
					virtualNode.currentElement.source or "<enable element tracebacks>"
				),
				0
			)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		-- selene: allow(if_same_then_else)
		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createReconciler"))() end)

newModule("createReconcilerCompat", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createReconcilerCompat", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createReconcilerCompat"))() end)

newModule("createRef", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createRef", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(_self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(_self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(_self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createRef"))() end)

newModule("createSignal", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createSignal", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(_self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(_self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createSignal"))() end)

newModule("createSpy", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.createSpy", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {}
	self.callCount = 0
	self.values = {}
	self.valuesLength = 0
	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = { ... }
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
		return nil
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.createSpy"))() end)

newModule("forwardRef", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.forwardRef", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.forwardRef"))() end)

newModule("getDefaultInstanceProperty", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.getDefaultInstanceProperty", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.getDefaultInstanceProperty"))() end)

newModule("internalAssert", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.internalAssert", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.internalAssert"))() end)

newModule("invalidSetStateMessages", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.invalidSetStateMessages", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.invalidSetStateMessages"))() end)

newModule("oneChild", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.oneChild", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.oneChild"))() end)

newModule("strict", "ModuleScript", "roblox-ts-model.include.node_modules.roact.src.strict", "roblox-ts-model.include.node_modules.roact.src", function () return setfenv(function() --!nonstrict
local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(_self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,

		__newindex = function(_self, key, _value)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,
	})
end

return strict
 end, newEnv("roblox-ts-model.include.node_modules.roact.src.strict"))() end)

newInstance("roact-hooks", "Folder", "roblox-ts-model.include.node_modules.roact-hooks", "roblox-ts-model.include.node_modules")

newModule("src", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src", "roblox-ts-model.include.node_modules.roact-hooks", function () return setfenv(function() local createUseBinding = require(script.createUseBinding)
local createUseCallback = require(script.createUseCallback)
local createUseContext = require(script.createUseContext)
local createUseEffect = require(script.createUseEffect)
local createUseMemo = require(script.createUseMemo)
local createUseReducer = require(script.createUseReducer)
local createUseState = require(script.createUseState)
local createUseValue = require(script.createUseValue)
local dependenciesDifferent = require(script.dependenciesDifferent)

local Hooks = {}

local function createHooks(roact, component)
	local useEffect = createUseEffect(component)
	local useState = createUseState(component)
	local useValue = createUseValue(component)

	local useBinding = createUseBinding(roact, useValue)
	local useContext = createUseContext(component, useEffect, useState)
	local useMemo = createUseMemo(useValue)

	local useCallback = createUseCallback(useMemo)

	local useReducer = createUseReducer(useCallback, useState)

	return {
		Roact = roact,
		useBinding = useBinding,
		useCallback = useCallback,
		useContext = useContext,
		useEffect = useEffect,
		useMemo = useMemo,
		useReducer = useReducer,
		useState = useState,
		useValue = useValue,
	}
end

function Hooks.new(roact)
	return function(render, options)
		assert(typeof(render) == "function", "Hooked components must be functions.")

		if options == nil then
			options = {}
		end

		local componentType = options.componentType
		local name = options.name or debug.info(render, "n")

		local classComponent

		if componentType == nil or componentType == "Component" then
			classComponent = roact.Component:extend(name)
		elseif componentType == "PureComponent" then
			classComponent = roact.PureComponent:extend(name)
		else
			error(
				string.format(
					"'%s' is not a valid componentType. componentType must either be nil, 'Component', or 'PureComponent'",
					tostring(componentType)
				)
			)
		end

		classComponent.defaultProps = options.defaultProps
		classComponent.validateProps = options.validateProps

		function classComponent:init()
			self.defaultStateValues = {}
			self.effectDependencies = {}
			self.effects = {}
			self.unmountEffects = {}

			self.hooks = createHooks(roact, self)
		end

		function classComponent:runEffects()
			for index = 1, self.hookCounter do
				local effectData = self.effects[index]
				if effectData == nil then
					continue
				end

				local effect, dependsOn = unpack(effectData)

				if dependsOn ~= nil then
					local lastDependencies = self.effectDependencies[index]
					if lastDependencies ~= nil and not dependenciesDifferent(dependsOn, lastDependencies) then
						continue
					end

					self.effectDependencies[index] = dependsOn
				end

				local unmountEffect = self.unmountEffects[index]
				if unmountEffect ~= nil then
					unmountEffect()
				end

				self.unmountEffects[index] = effect()
			end
		end

		function classComponent:didMount()
			self:runEffects()
		end

		function classComponent:didUpdate()
			self:runEffects()
		end

		function classComponent:willUnmount()
			for index = 1, self.hookCounter do
				local unmountEffect = self.unmountEffects[index]

				if unmountEffect ~= nil then
					unmountEffect()
				end
			end
		end

		function classComponent:render()
			self.hookCounter = 0

			return render(self.props, self.hooks)
		end

		return classComponent
	end
end

return Hooks
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src"))() end)

newModule("createUseBinding", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseBinding", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseBinding(roact, useValue)
	return function(defaultValue)
		return unpack(useValue({
			roact.createBinding(defaultValue)
		}).value)
	end
end

return createUseBinding
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseBinding"))() end)

newModule("createUseCallback", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseCallback", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseCallback(useMemo)
	return function(callback, dependencies)
		return useMemo(function()
			return callback
		end, dependencies)
	end
end

return createUseCallback
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseCallback"))() end)

newModule("createUseContext", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseContext", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseContext(component, useEffect, useState)
	-- HACK: I'd like to just use the values from the consumers directly.
	-- However, we don't know what contexts to listen to until `useContext` is called.
	-- Thus, we do this insanely unstable method for doing it. :)
	local fakeConsumer = setmetatable({}, {
		__index = component,
	})

	return function(context)
		context.Consumer.init(fakeConsumer)

		local contextEntry = fakeConsumer.contextEntry
		local value, setValue = useState(if contextEntry == nil then nil else contextEntry.value)

		useEffect(function()
			if contextEntry == nil then
				return
			end

			if value ~= contextEntry.value then
				setValue(contextEntry.value)
			end
			
			return contextEntry.onUpdate:subscribe(setValue)
		end, { contextEntry })

		return value
	end
end

return createUseContext
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseContext"))() end)

newModule("createUseEffect", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseEffect", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseEffect(component)
	return function(callback, dependsOn)
		assert(typeof(callback) == "function", "useEffect callback is not a function")

		component.hookCounter += 1
		local hookCount = component.hookCounter

		-- TODO: This mutates the component in the middle of render. That's bad, right?
		-- It's idempotent, so it shouldn't matter.
		-- Is there a way to do this that keeps `render` truly pure?
		component.effects[hookCount] = { callback, dependsOn }
	end
end

return createUseEffect
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseEffect"))() end)

newModule("createUseMemo", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseMemo", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local dependenciesDifferent = require(script.Parent.dependenciesDifferent)

local function createUseMemo(useValue)
	return function(createValue, dependencies)
		local currentValue = useValue(nil)

		local needToRecalculate = dependencies == nil

		if currentValue.value == nil or dependenciesDifferent(dependencies, currentValue.value.dependencies) then
			needToRecalculate = true
		end

		if needToRecalculate then
			currentValue.value = {
				dependencies = dependencies,
				memoizedValue = { createValue() },
			}
		end

		return unpack(currentValue.value.memoizedValue)
	end
end

return createUseMemo
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseMemo"))() end)

newModule("createUseReducer", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseReducer", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseReducer(useCallback, useState)
	return function(reducer, initialState)
		local state, setState = useState(initialState)
		local dispatch = useCallback(function(action)
			setState(reducer(state, action))
		end, { state })

		return state, dispatch
	end
end

return createUseReducer
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseReducer"))() end)

newModule("createUseState", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseState", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local NONE = {}

local function extractValue(valueOrCallback, currentValue)
	if type(valueOrCallback) == "function" then
		return valueOrCallback(currentValue)
	else
		return valueOrCallback
	end
end

local function createUseState(component)
	local setValues = {}

	return function(defaultValue)
		component.hookCounter += 1
		local hookCount = component.hookCounter
		local value = component.state[hookCount]

		if value == nil then
			local storedDefaultValue = component.defaultStateValues[hookCount]
			if storedDefaultValue == NONE then
				value = nil
			elseif storedDefaultValue ~= nil then
				value = storedDefaultValue
			elseif type(defaultValue) == "function" then
				value = defaultValue()

				if value == nil then
					component.defaultStateValues[hookCount] = NONE
				else
					component.defaultStateValues[hookCount] = value
				end
			else
				value = defaultValue
				component.defaultStateValues[hookCount] = value
			end
		elseif value == NONE then
			value = nil
		end

		local setValue = setValues[hookCount]
		if setValue == nil then
			setValue = function(newValue)
				local currentValue = component.state[hookCount]

				if currentValue == nil then
					currentValue = component.defaultStateValues[hookCount]
				end

				if currentValue == NONE then
					currentValue = nil
				end

				newValue = extractValue(newValue, currentValue)

				if newValue == nil then
					newValue = NONE
				end

				component:setState({
					[hookCount] = newValue,
				})
			end

			setValues[hookCount] = setValue
		end

		return value, setValue
	end
end

return createUseState
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseState"))() end)

newModule("createUseValue", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.createUseValue", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function createUseValue(component)
	return function(defaultValue)
		component.hookCounter += 1
		local hookCount = component.hookCounter

		if component.values == nil then
			component.values = {}
		end

		if component.values[hookCount] == nil then
			component.values[hookCount] = { value = defaultValue }
		end

		return component.values[hookCount]
	end
end

return createUseValue
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.createUseValue"))() end)

newModule("dependenciesDifferent", "ModuleScript", "roblox-ts-model.include.node_modules.roact-hooks.src.dependenciesDifferent", "roblox-ts-model.include.node_modules.roact-hooks.src", function () return setfenv(function() local function dependenciesDifferent(dependencies, lastDependencies)
	local length = 0

	for index, dependency in pairs(dependencies) do
		length += 1

		if dependency ~= lastDependencies[index] then
			return true
		end
	end

	for _ in pairs(lastDependencies) do
		length -= 1
	end

	if length ~= 0 then
		return true
	end

	return false
end

return dependenciesDifferent
 end, newEnv("roblox-ts-model.include.node_modules.roact-hooks.src.dependenciesDifferent"))() end)

newInstance("types", "Folder", "roblox-ts-model.include.node_modules.types", "roblox-ts-model.include.node_modules")

newInstance("include", "Folder", "roblox-ts-model.include.node_modules.types.include", "roblox-ts-model.include.node_modules.types")

newInstance("generated", "Folder", "roblox-ts-model.include.node_modules.types.include.generated", "roblox-ts-model.include.node_modules.types.include")

init()